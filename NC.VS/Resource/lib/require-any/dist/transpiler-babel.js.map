{"version":3,"names":[],"mappings":"","sources":["babel.js"],"sourcesContent":["// babel-transform.js\r\n// babel 转换适配器\r\n\r\ndefine('transpiler-babel', ['any', 'babel-standalone'], function(any, babel) {\r\n\r\n    \"use strict\";\r\n\r\n    var Base64 = any.Base64;\r\n\r\n    var indexOf = function(array, item) {\r\n        if (array.length <= 0)\r\n            return -1;\r\n        return array.indexOf(item);\r\n    };\r\n\r\n    var containsOrPush = function(array, item) {\r\n        if (indexOf(array, item) < 0)\r\n            array.push(item);\r\n        return array;\r\n    };\r\n\r\n    var containsAndRemove = function(array, item) {\r\n        var index = indexOf(array, item);\r\n        if (index > -1)\r\n            array.splice(index, 1);\r\n        return array;\r\n    };\r\n\r\n    var prepareOptions = function(options, name, ext, url) {\r\n        if (!any.isArray(options.presets))\r\n            options.presets = [];\r\n        // 确保转换为es2015，目前es6还不是普遍性实现，但相信很快就会得到普及了。\r\n        containsOrPush(options.presets, 'es2015');\r\n\r\n        if (ext === 'jsx')\r\n            containsOrPush(options.presets, 'react');\r\n\r\n        if (!any.isArray(options.plugins))\r\n            options.plugins = [];\r\n\r\n        // 应为考虑到代码是缓存的，所以我们生成sourceMaps，以方便调试\r\n        options.sourceMaps = true;\r\n        options.sourceMapTarget = name;\r\n        options.sourceFileName = url;\r\n\r\n        return options;\r\n    };\r\n\r\n    function transform(name, url, code) {\r\n        var ext = any.getFileExt(name);\r\n        var options = prepareOptions(any.getExtOptions(ext), name, ext, url);\r\n\r\n        var result = {\r\n            text: '',\r\n            error: null\r\n        };\r\n        try {\r\n            result = babel.transform(code, options);\r\n            result.text = result.code;\r\n            result.text += '\\n//# sourceMappingURL=data:application/json;base64,' + Base64.encode(any.jsonEncode(result.map || {})) + '\\n//# sourceURL=' + url;\r\n        }\r\n        catch (error) {\r\n            result.error = error;\r\n            if (any.isDebug)\r\n                console.trace(error);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        handle: function(name, req, load, config) {\r\n            var date, dateInt, length = 0\r\n\t\t\t\t, ext = any.getFileExt(name)\r\n\t\t\t\t, url = req.toUrl(name)\r\n                //>>debug<<\r\n                , isDebug = any.isDebug\r\n                , startDate = new Date()\r\n                , debug = { src: 'cache', xhr: 0, handle: 0, lastModified: null, length: 0, url: url }\r\n                ;\r\n\r\n\t\t\tany.xhr(url, {\r\n\t\t\t\terror: function(error) {\r\n\t\t\t\t\tload.error(error);\r\n\t\t\t\t},\r\n\t\t\t\theaders: function() {\r\n\t\t\t\t\tdate = new Date(this.getResponseHeader('Last-Modified'));\r\n\t\t\t\t\tdateInt = date.valueOf();\r\n\t\t\t\t\tlength = parseInt(this.getResponseHeader('Content-Length'));\r\n                    //>>debug<<\r\n                    var tempDate = new Date();\r\n                    if (isDebug) {\r\n                        debug.xhr = any.diffDate(startDate) + 'ms';\r\n                        debug.length = length;\r\n                        debug.lastModified = date;\r\n                    }\r\n\t\t\t\t\tvar cache = any.cache.compare(name, dateInt, length);\r\n\t\t\t\t\tif (cache !== false) {\r\n\t\t\t\t\t\tthis.abort();\r\n                        //>>debug<<\r\n                        if (isDebug) {\r\n                            debug.handle = any.diffDate(tempDate) + 'ms';\r\n                            debug.code = cache.text;\r\n                            console.debug(name, debug);\r\n                        }\r\n\t\t\t\t\t\tload.fromText(cache.text);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tdone: function() {\r\n                    //>>debug<<\r\n                    var tempDate = new Date();\r\n                    if (isDebug) {\r\n                        debug.src = 'update';\r\n                        debug.xhr = any.diffDate(startDate) + 'ms';\r\n                        debug.raw = this.response;\r\n                    }\r\n\t\t\t\t\tvar onCompile = function(result) {\r\n                        //>>debug<<\r\n                        if (isDebug) {\r\n                            debug.handle = any.diffDate(tempDate) + 'ms';\r\n                        }\r\n\t\t\t\t\t\tif (result.error != null) {\r\n                            //>>debug<<\r\n                            if (isDebug) {\r\n                                debug.error = result.error;\r\n                                console.debug(name, debug);\r\n                            }\r\n                            load.error(result.error);\r\n                        }\r\n\t\t\t\t\t\telse {\r\n                            //>>debug<<\r\n                            if (isDebug) {\r\n                                debug.code = result.text;\r\n                                console.debug(name, debug);\r\n                            }\r\n\t\t\t\t\t\t\tany.cache.set(name, {\r\n\t\t\t\t\t\t\t\tdate: dateInt,\r\n\t\t\t\t\t\t\t\tlength: length,\r\n\t\t\t\t\t\t\t\ttext: result.text\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tload.fromText(result.text);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t};\r\n\t\t\t\t\tonCompile(transform(name, url, this.response));\r\n\t\t\t\t}\r\n\t\t\t});\r\n        }\r\n    }\r\n});\r\n"],"file":"babel.js"}