{"version":3,"names":[],"mappings":"","sources":["coffee-react.js"],"sourcesContent":["// https://wzrd.in/standalone/coffee-react-transform\r\n// https://github.com/jsdf/coffee-react-transform\r\n\r\n!function (e) {\r\n\tif (\"object\" == typeof exports && \"undefined\" != typeof module)module.exports = e(); else if (\"function\" == typeof define && define.amd)define('transpiler-coffee-react', [], e); else {\r\n\t\tvar f;\r\n\t\t\"undefined\" != typeof window ? f = window : \"undefined\" != typeof global ? f = global : \"undefined\" != typeof self && (f = self), f.coffeeReactTransform = e()\r\n\t}\r\n}(function () {\r\n\tvar define, module, exports;\r\n\treturn (function e(t, n, r) {\r\n\t\tfunction s(o, u) {\r\n\t\t\tif (!n[o]) {\r\n\t\t\t\tif (!t[o]) {\r\n\t\t\t\t\tvar a = typeof require == \"function\" && require;\r\n\t\t\t\t\tif (!u && a)return a(o, !0);\r\n\t\t\t\t\tif (i)return i(o, !0);\r\n\t\t\t\t\tvar f = new Error(\"Cannot find module '\" + o + \"'\");\r\n\t\t\t\t\tthrow f.code = \"MODULE_NOT_FOUND\", f\r\n\t\t\t\t}\r\n\t\t\t\tvar l = n[o] = {exports: {}};\r\n\t\t\t\tt[o][0].call(l.exports, function (e) {\r\n\t\t\t\t\tvar n = t[o][1][e];\r\n\t\t\t\t\treturn s(n ? n : e)\r\n\t\t\t\t}, l, l.exports, e, t, n, r)\r\n\t\t\t}\r\n\t\t\treturn n[o].exports\r\n\t\t}\r\n\r\n\t\tvar i = typeof require == \"function\" && require;\r\n\t\tfor (var o = 0; o < r.length; o++)s(r[o]);\r\n\t\treturn s\r\n\t})({\r\n\t\t1: [function (require, module, exports) {\r\n\t\t\tmodule.exports = require('./lib/transformer').transform;\r\n\r\n\t\t}, {\"./lib/transformer\": 8}],\r\n\t\t2: [function (require, module, exports) {\r\n// from esprima-fb/esprima.js\r\n\r\n\t\t\tvar XHTMLEntities = {\r\n\t\t\t\tquot: '\\u0022',\r\n\t\t\t\tamp: '&',\r\n\t\t\t\tapos: \"\\u0027\",\r\n\t\t\t\tlt: \"<\",\r\n\t\t\t\tgt: \">\",\r\n\t\t\t\tnbsp: \"\\u00A0\",\r\n\t\t\t\tiexcl: \"\\u00A1\",\r\n\t\t\t\tcent: \"\\u00A2\",\r\n\t\t\t\tpound: \"\\u00A3\",\r\n\t\t\t\tcurren: \"\\u00A4\",\r\n\t\t\t\tyen: \"\\u00A5\",\r\n\t\t\t\tbrvbar: \"\\u00A6\",\r\n\t\t\t\tsect: \"\\u00A7\",\r\n\t\t\t\tuml: \"\\u00A8\",\r\n\t\t\t\tcopy: \"\\u00A9\",\r\n\t\t\t\tordf: \"\\u00AA\",\r\n\t\t\t\tlaquo: \"\\u00AB\",\r\n\t\t\t\tnot: \"\\u00AC\",\r\n\t\t\t\tshy: \"\\u00AD\",\r\n\t\t\t\treg: \"\\u00AE\",\r\n\t\t\t\tmacr: \"\\u00AF\",\r\n\t\t\t\tdeg: \"\\u00B0\",\r\n\t\t\t\tplusmn: \"\\u00B1\",\r\n\t\t\t\tsup2: \"\\u00B2\",\r\n\t\t\t\tsup3: \"\\u00B3\",\r\n\t\t\t\tacute: \"\\u00B4\",\r\n\t\t\t\tmicro: \"\\u00B5\",\r\n\t\t\t\tpara: \"\\u00B6\",\r\n\t\t\t\tmiddot: \"\\u00B7\",\r\n\t\t\t\tcedil: \"\\u00B8\",\r\n\t\t\t\tsup1: \"\\u00B9\",\r\n\t\t\t\tordm: \"\\u00BA\",\r\n\t\t\t\traquo: \"\\u00BB\",\r\n\t\t\t\tfrac14: \"\\u00BC\",\r\n\t\t\t\tfrac12: \"\\u00BD\",\r\n\t\t\t\tfrac34: \"\\u00BE\",\r\n\t\t\t\tiquest: \"\\u00BF\",\r\n\t\t\t\tAgrave: \"\\u00C0\",\r\n\t\t\t\tAacute: \"\\u00C1\",\r\n\t\t\t\tAcirc: \"\\u00C2\",\r\n\t\t\t\tAtilde: \"\\u00C3\",\r\n\t\t\t\tAuml: \"\\u00C4\",\r\n\t\t\t\tAring: \"\\u00C5\",\r\n\t\t\t\tAElig: \"\\u00C6\",\r\n\t\t\t\tCcedil: \"\\u00C7\",\r\n\t\t\t\tEgrave: \"\\u00C8\",\r\n\t\t\t\tEacute: \"\\u00C9\",\r\n\t\t\t\tEcirc: \"\\u00CA\",\r\n\t\t\t\tEuml: \"\\u00CB\",\r\n\t\t\t\tIgrave: \"\\u00CC\",\r\n\t\t\t\tIacute: \"\\u00CD\",\r\n\t\t\t\tIcirc: \"\\u00CE\",\r\n\t\t\t\tIuml: \"\\u00CF\",\r\n\t\t\t\tETH: \"\\u00D0\",\r\n\t\t\t\tNtilde: \"\\u00D1\",\r\n\t\t\t\tOgrave: \"\\u00D2\",\r\n\t\t\t\tOacute: \"\\u00D3\",\r\n\t\t\t\tOcirc: \"\\u00D4\",\r\n\t\t\t\tOtilde: \"\\u00D5\",\r\n\t\t\t\tOuml: \"\\u00D6\",\r\n\t\t\t\ttimes: \"\\u00D7\",\r\n\t\t\t\tOslash: \"\\u00D8\",\r\n\t\t\t\tUgrave: \"\\u00D9\",\r\n\t\t\t\tUacute: \"\\u00DA\",\r\n\t\t\t\tUcirc: \"\\u00DB\",\r\n\t\t\t\tUuml: \"\\u00DC\",\r\n\t\t\t\tYacute: \"\\u00DD\",\r\n\t\t\t\tTHORN: \"\\u00DE\",\r\n\t\t\t\tszlig: \"\\u00DF\",\r\n\t\t\t\tagrave: \"\\u00E0\",\r\n\t\t\t\taacute: \"\\u00E1\",\r\n\t\t\t\tacirc: \"\\u00E2\",\r\n\t\t\t\tatilde: \"\\u00E3\",\r\n\t\t\t\tauml: \"\\u00E4\",\r\n\t\t\t\taring: \"\\u00E5\",\r\n\t\t\t\taelig: \"\\u00E6\",\r\n\t\t\t\tccedil: \"\\u00E7\",\r\n\t\t\t\tegrave: \"\\u00E8\",\r\n\t\t\t\teacute: \"\\u00E9\",\r\n\t\t\t\tecirc: \"\\u00EA\",\r\n\t\t\t\teuml: \"\\u00EB\",\r\n\t\t\t\tigrave: \"\\u00EC\",\r\n\t\t\t\tiacute: \"\\u00ED\",\r\n\t\t\t\ticirc: \"\\u00EE\",\r\n\t\t\t\tiuml: \"\\u00EF\",\r\n\t\t\t\teth: \"\\u00F0\",\r\n\t\t\t\tntilde: \"\\u00F1\",\r\n\t\t\t\tograve: \"\\u00F2\",\r\n\t\t\t\toacute: \"\\u00F3\",\r\n\t\t\t\tocirc: \"\\u00F4\",\r\n\t\t\t\totilde: \"\\u00F5\",\r\n\t\t\t\touml: \"\\u00F6\",\r\n\t\t\t\tdivide: \"\\u00F7\",\r\n\t\t\t\toslash: \"\\u00F8\",\r\n\t\t\t\tugrave: \"\\u00F9\",\r\n\t\t\t\tuacute: \"\\u00FA\",\r\n\t\t\t\tucirc: \"\\u00FB\",\r\n\t\t\t\tuuml: \"\\u00FC\",\r\n\t\t\t\tyacute: \"\\u00FD\",\r\n\t\t\t\tthorn: \"\\u00FE\",\r\n\t\t\t\tyuml: \"\\u00FF\",\r\n\t\t\t\tOElig: \"\\u0152\",\r\n\t\t\t\toelig: \"\\u0153\",\r\n\t\t\t\tScaron: \"\\u0160\",\r\n\t\t\t\tscaron: \"\\u0161\",\r\n\t\t\t\tYuml: \"\\u0178\",\r\n\t\t\t\tfnof: \"\\u0192\",\r\n\t\t\t\tcirc: \"\\u02C6\",\r\n\t\t\t\ttilde: \"\\u02DC\",\r\n\t\t\t\tAlpha: \"\\u0391\",\r\n\t\t\t\tBeta: \"\\u0392\",\r\n\t\t\t\tGamma: \"\\u0393\",\r\n\t\t\t\tDelta: \"\\u0394\",\r\n\t\t\t\tEpsilon: \"\\u0395\",\r\n\t\t\t\tZeta: \"\\u0396\",\r\n\t\t\t\tEta: \"\\u0397\",\r\n\t\t\t\tTheta: \"\\u0398\",\r\n\t\t\t\tIota: \"\\u0399\",\r\n\t\t\t\tKappa: \"\\u039A\",\r\n\t\t\t\tLambda: \"\\u039B\",\r\n\t\t\t\tMu: \"\\u039C\",\r\n\t\t\t\tNu: \"\\u039D\",\r\n\t\t\t\tXi: \"\\u039E\",\r\n\t\t\t\tOmicron: \"\\u039F\",\r\n\t\t\t\tPi: \"\\u03A0\",\r\n\t\t\t\tRho: \"\\u03A1\",\r\n\t\t\t\tSigma: \"\\u03A3\",\r\n\t\t\t\tTau: \"\\u03A4\",\r\n\t\t\t\tUpsilon: \"\\u03A5\",\r\n\t\t\t\tPhi: \"\\u03A6\",\r\n\t\t\t\tChi: \"\\u03A7\",\r\n\t\t\t\tPsi: \"\\u03A8\",\r\n\t\t\t\tOmega: \"\\u03A9\",\r\n\t\t\t\talpha: \"\\u03B1\",\r\n\t\t\t\tbeta: \"\\u03B2\",\r\n\t\t\t\tgamma: \"\\u03B3\",\r\n\t\t\t\tdelta: \"\\u03B4\",\r\n\t\t\t\tepsilon: \"\\u03B5\",\r\n\t\t\t\tzeta: \"\\u03B6\",\r\n\t\t\t\teta: \"\\u03B7\",\r\n\t\t\t\ttheta: \"\\u03B8\",\r\n\t\t\t\tiota: \"\\u03B9\",\r\n\t\t\t\tkappa: \"\\u03BA\",\r\n\t\t\t\tlambda: \"\\u03BB\",\r\n\t\t\t\tmu: \"\\u03BC\",\r\n\t\t\t\tnu: \"\\u03BD\",\r\n\t\t\t\txi: \"\\u03BE\",\r\n\t\t\t\tomicron: \"\\u03BF\",\r\n\t\t\t\tpi: \"\\u03C0\",\r\n\t\t\t\trho: \"\\u03C1\",\r\n\t\t\t\tsigmaf: \"\\u03C2\",\r\n\t\t\t\tsigma: \"\\u03C3\",\r\n\t\t\t\ttau: \"\\u03C4\",\r\n\t\t\t\tupsilon: \"\\u03C5\",\r\n\t\t\t\tphi: \"\\u03C6\",\r\n\t\t\t\tchi: \"\\u03C7\",\r\n\t\t\t\tpsi: \"\\u03C8\",\r\n\t\t\t\tomega: \"\\u03C9\",\r\n\t\t\t\tthetasym: \"\\u03D1\",\r\n\t\t\t\tupsih: \"\\u03D2\",\r\n\t\t\t\tpiv: \"\\u03D6\",\r\n\t\t\t\tensp: \"\\u2002\",\r\n\t\t\t\temsp: \"\\u2003\",\r\n\t\t\t\tthinsp: \"\\u2009\",\r\n\t\t\t\tzwnj: \"\\u200C\",\r\n\t\t\t\tzwj: \"\\u200D\",\r\n\t\t\t\tlrm: \"\\u200E\",\r\n\t\t\t\trlm: \"\\u200F\",\r\n\t\t\t\tndash: \"\\u2013\",\r\n\t\t\t\tmdash: \"\\u2014\",\r\n\t\t\t\tlsquo: \"\\u2018\",\r\n\t\t\t\trsquo: \"\\u2019\",\r\n\t\t\t\tsbquo: \"\\u201A\",\r\n\t\t\t\tldquo: \"\\u201C\",\r\n\t\t\t\trdquo: \"\\u201D\",\r\n\t\t\t\tbdquo: \"\\u201E\",\r\n\t\t\t\tdagger: \"\\u2020\",\r\n\t\t\t\tDagger: \"\\u2021\",\r\n\t\t\t\tbull: \"\\u2022\",\r\n\t\t\t\thellip: \"\\u2026\",\r\n\t\t\t\tpermil: \"\\u2030\",\r\n\t\t\t\tprime: \"\\u2032\",\r\n\t\t\t\tPrime: \"\\u2033\",\r\n\t\t\t\tlsaquo: \"\\u2039\",\r\n\t\t\t\trsaquo: \"\\u203A\",\r\n\t\t\t\toline: \"\\u203E\",\r\n\t\t\t\tfrasl: \"\\u2044\",\r\n\t\t\t\teuro: \"\\u20AC\",\r\n\t\t\t\timage: \"\\u2111\",\r\n\t\t\t\tweierp: \"\\u2118\",\r\n\t\t\t\treal: \"\\u211C\",\r\n\t\t\t\ttrade: \"\\u2122\",\r\n\t\t\t\talefsym: \"\\u2135\",\r\n\t\t\t\tlarr: \"\\u2190\",\r\n\t\t\t\tuarr: \"\\u2191\",\r\n\t\t\t\trarr: \"\\u2192\",\r\n\t\t\t\tdarr: \"\\u2193\",\r\n\t\t\t\tharr: \"\\u2194\",\r\n\t\t\t\tcrarr: \"\\u21B5\",\r\n\t\t\t\tlArr: \"\\u21D0\",\r\n\t\t\t\tuArr: \"\\u21D1\",\r\n\t\t\t\trArr: \"\\u21D2\",\r\n\t\t\t\tdArr: \"\\u21D3\",\r\n\t\t\t\thArr: \"\\u21D4\",\r\n\t\t\t\tforall: \"\\u2200\",\r\n\t\t\t\tpart: \"\\u2202\",\r\n\t\t\t\texist: \"\\u2203\",\r\n\t\t\t\tempty: \"\\u2205\",\r\n\t\t\t\tnabla: \"\\u2207\",\r\n\t\t\t\tisin: \"\\u2208\",\r\n\t\t\t\tnotin: \"\\u2209\",\r\n\t\t\t\tni: \"\\u220B\",\r\n\t\t\t\tprod: \"\\u220F\",\r\n\t\t\t\tsum: \"\\u2211\",\r\n\t\t\t\tminus: \"\\u2212\",\r\n\t\t\t\tlowast: \"\\u2217\",\r\n\t\t\t\tradic: \"\\u221A\",\r\n\t\t\t\tprop: \"\\u221D\",\r\n\t\t\t\tinfin: \"\\u221E\",\r\n\t\t\t\tang: \"\\u2220\",\r\n\t\t\t\tand: \"\\u2227\",\r\n\t\t\t\tor: \"\\u2228\",\r\n\t\t\t\tcap: \"\\u2229\",\r\n\t\t\t\tcup: \"\\u222A\",\r\n\t\t\t\t\"int\": \"\\u222B\",\r\n\t\t\t\tthere4: \"\\u2234\",\r\n\t\t\t\tsim: \"\\u223C\",\r\n\t\t\t\tcong: \"\\u2245\",\r\n\t\t\t\tasymp: \"\\u2248\",\r\n\t\t\t\tne: \"\\u2260\",\r\n\t\t\t\tequiv: \"\\u2261\",\r\n\t\t\t\tle: \"\\u2264\",\r\n\t\t\t\tge: \"\\u2265\",\r\n\t\t\t\tsub: \"\\u2282\",\r\n\t\t\t\tsup: \"\\u2283\",\r\n\t\t\t\tnsub: \"\\u2284\",\r\n\t\t\t\tsube: \"\\u2286\",\r\n\t\t\t\tsupe: \"\\u2287\",\r\n\t\t\t\toplus: \"\\u2295\",\r\n\t\t\t\totimes: \"\\u2297\",\r\n\t\t\t\tperp: \"\\u22A5\",\r\n\t\t\t\tsdot: \"\\u22C5\",\r\n\t\t\t\tlceil: \"\\u2308\",\r\n\t\t\t\trceil: \"\\u2309\",\r\n\t\t\t\tlfloor: \"\\u230A\",\r\n\t\t\t\trfloor: \"\\u230B\",\r\n\t\t\t\tlang: \"\\u2329\",\r\n\t\t\t\trang: \"\\u232A\",\r\n\t\t\t\tloz: \"\\u25CA\",\r\n\t\t\t\tspades: \"\\u2660\",\r\n\t\t\t\tclubs: \"\\u2663\",\r\n\t\t\t\thearts: \"\\u2665\",\r\n\t\t\t\tdiams: \"\\u2666\"\r\n\t\t\t};\r\n\r\n\t\t\tmodule.exports = function decode(str) {\r\n\t\t\t\treturn str\r\n\t\t\t\t\t.replace(/&#(\\d+);?/g, function (_, code) {\r\n\t\t\t\t\t\treturn String.fromCharCode(parseInt(code, 10));\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.replace(/&#[xX]([A-Fa-f0-9]+);?/g, function (_, hex) {\r\n\t\t\t\t\t\treturn String.fromCharCode(parseInt(hex, 16));\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.replace(/&([^;\\W]+;?)/g, function (m, e) {\r\n\t\t\t\t\t\tvar ee = e.replace(/;$/, '');\r\n\t\t\t\t\t\tvar entity = XHTMLEntities[e]\r\n\t\t\t\t\t\t\t\t|| (e.match(/;$/) && XHTMLEntities[ee])\r\n\t\t\t\t\t\t\t;\r\n\r\n\t\t\t\t\t\tif (entity) {\r\n\t\t\t\t\t\t\treturn entity;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn m;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t}, {}],\r\n\t\t3: [function (require, module, exports) {\r\n\t\t\t(function (process) {\r\n// Generated by CoffeeScript 1.9.3\r\n\t\t\t\tvar extend, flatten, last, ref, ref1, repeat, syntaxErrorToString;\r\n\r\n\t\t\t\texports.starts = function (string, literal, start) {\r\n\t\t\t\t\treturn literal === string.substr(start, literal.length);\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.ends = function (string, literal, back) {\r\n\t\t\t\t\tvar len;\r\n\t\t\t\t\tlen = literal.length;\r\n\t\t\t\t\treturn literal === string.substr(string.length - len - (back || 0), len);\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.repeat = repeat = function (str, n) {\r\n\t\t\t\t\tvar res;\r\n\t\t\t\t\tres = '';\r\n\t\t\t\t\twhile (n > 0) {\r\n\t\t\t\t\t\tif (n & 1) {\r\n\t\t\t\t\t\t\tres += str;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn >>>= 1;\r\n\t\t\t\t\t\tstr += str;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.compact = function (array) {\r\n\t\t\t\t\tvar i, item, len1, results;\r\n\t\t\t\t\tresults = [];\r\n\t\t\t\t\tfor (i = 0, len1 = array.length; i < len1; i++) {\r\n\t\t\t\t\t\titem = array[i];\r\n\t\t\t\t\t\tif (item) {\r\n\t\t\t\t\t\t\tresults.push(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.count = function (string, substr) {\r\n\t\t\t\t\tvar num, pos;\r\n\t\t\t\t\tnum = pos = 0;\r\n\t\t\t\t\tif (!substr.length) {\r\n\t\t\t\t\t\treturn 1 / 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile (pos = 1 + string.indexOf(substr, pos)) {\r\n\t\t\t\t\t\tnum++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn num;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.merge = function (options, overrides) {\r\n\t\t\t\t\treturn extend(extend({}, options), overrides);\r\n\t\t\t\t};\r\n\r\n\t\t\t\textend = exports.extend = function (object, properties) {\r\n\t\t\t\t\tvar key, val;\r\n\t\t\t\t\tfor (key in properties) {\r\n\t\t\t\t\t\tval = properties[key];\r\n\t\t\t\t\t\tobject[key] = val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn object;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.flatten = flatten = function (array) {\r\n\t\t\t\t\tvar element, flattened, i, len1;\r\n\t\t\t\t\tflattened = [];\r\n\t\t\t\t\tfor (i = 0, len1 = array.length; i < len1; i++) {\r\n\t\t\t\t\t\telement = array[i];\r\n\t\t\t\t\t\tif (element instanceof Array) {\r\n\t\t\t\t\t\t\tflattened = flattened.concat(flatten(element));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tflattened.push(element);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn flattened;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.del = function (obj, key) {\r\n\t\t\t\t\tvar val;\r\n\t\t\t\t\tval = obj[key];\r\n\t\t\t\t\tdelete obj[key];\r\n\t\t\t\t\treturn val;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.last = last = function (array, back) {\r\n\t\t\t\t\treturn array[array.length - (back || 0) - 1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.some = (ref = Array.prototype.some) != null ? ref : function (fn) {\r\n\t\t\t\t\tvar e, i, len1;\r\n\t\t\t\t\tfor (i = 0, len1 = this.length; i < len1; i++) {\r\n\t\t\t\t\t\te = this[i];\r\n\t\t\t\t\t\tif (fn(e)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.find = (ref1 = Array.prototype.find) != null ? ref1 : function (fn) {\r\n\t\t\t\t\tvar e, i, len1;\r\n\t\t\t\t\tfor (i = 0, len1 = this.length; i < len1; i++) {\r\n\t\t\t\t\t\te = this[i];\r\n\t\t\t\t\t\tif (fn(e)) {\r\n\t\t\t\t\t\t\treturn e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.throwSyntaxError = function (message, location) {\r\n\t\t\t\t\tvar error;\r\n\t\t\t\t\terror = new SyntaxError(message);\r\n\t\t\t\t\terror.location = location;\r\n\t\t\t\t\terror.toString = syntaxErrorToString;\r\n\t\t\t\t\terror.stack = error.toString();\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.updateSyntaxError = function (error, code, filename) {\r\n\t\t\t\t\tif (error.toString === syntaxErrorToString) {\r\n\t\t\t\t\t\terror.code || (error.code = code);\r\n\t\t\t\t\t\terror.filename || (error.filename = filename);\r\n\t\t\t\t\t\terror.stack = error.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsyntaxErrorToString = function () {\r\n\t\t\t\t\tvar codeLine, colorize, colorsEnabled, end, filename, first_column, first_line, last_column, last_line, marker, ref2, ref3, start;\r\n\t\t\t\t\tif (!(this.code && this.location)) {\r\n\t\t\t\t\t\treturn Error.prototype.toString.call(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tref2 = this.location, first_line = ref2.first_line, first_column = ref2.first_column, last_line = ref2.last_line, last_column = ref2.last_column;\r\n\t\t\t\t\tif (last_line == null) {\r\n\t\t\t\t\t\tlast_line = first_line;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last_column == null) {\r\n\t\t\t\t\t\tlast_column = first_column;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfilename = this.filename || '[stdin]';\r\n\t\t\t\t\tcodeLine = this.code.split('\\n')[first_line];\r\n\t\t\t\t\tstart = first_column;\r\n\t\t\t\t\tend = first_line === last_line ? last_column + 1 : codeLine.length;\r\n\t\t\t\t\tmarker = repeat(' ', start) + repeat('^', end - start);\r\n\t\t\t\t\tif (typeof process !== \"undefined\" && process !== null) {\r\n\t\t\t\t\t\tcolorsEnabled = process.stdout.isTTY && !process.env.NODE_DISABLE_COLORS;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((ref3 = this.colorful) != null ? ref3 : colorsEnabled) {\r\n\t\t\t\t\t\tcolorize = function (str) {\r\n\t\t\t\t\t\t\treturn \"\\x1B[1;31m\" + str + \"\\x1B[0m\";\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tcodeLine = codeLine.slice(0, start) + colorize(codeLine.slice(start, end)) + codeLine.slice(end);\r\n\t\t\t\t\t\tmarker = colorize(marker);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn filename + \":\" + (first_line + 1) + \":\" + (first_column + 1) + \": error: \" + this.message + \"\\n\" + codeLine + \"\\n\" + marker;\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.nameWhitespaceCharacter = function (string) {\r\n\t\t\t\t\tswitch (string) {\r\n\t\t\t\t\t\tcase ' ':\r\n\t\t\t\t\t\t\treturn 'space';\r\n\t\t\t\t\t\tcase '\\n':\r\n\t\t\t\t\t\t\treturn 'newline';\r\n\t\t\t\t\t\tcase '\\r':\r\n\t\t\t\t\t\t\treturn 'carriage return';\r\n\t\t\t\t\t\tcase '\\t':\r\n\t\t\t\t\t\t\treturn 'tab';\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn string;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\texports.invertLiterate = function (code) {\r\n\t\t\t\t\tvar line, lines, maybe_code;\r\n\t\t\t\t\tmaybe_code = true;\r\n\t\t\t\t\tlines = (function () {\r\n\t\t\t\t\t\tvar i, len1, ref2, results;\r\n\t\t\t\t\t\tref2 = code.split('\\n');\r\n\t\t\t\t\t\tresults = [];\r\n\t\t\t\t\t\tfor (i = 0, len1 = ref2.length; i < len1; i++) {\r\n\t\t\t\t\t\t\tline = ref2[i];\r\n\t\t\t\t\t\t\tif (maybe_code && /^([ ]{4}|[ ]{0,3}\\t)/.test(line)) {\r\n\t\t\t\t\t\t\t\tresults.push(line);\r\n\t\t\t\t\t\t\t} else if (maybe_code = /^\\s*$/.test(line)) {\r\n\t\t\t\t\t\t\t\tresults.push(line);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresults.push('# ' + line);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t})();\r\n\t\t\t\t\treturn lines.join('\\n');\r\n\t\t\t\t};\r\n\r\n\t\t\t}).call(this, require('_process'))\r\n\t\t}, {\"_process\": 9}],\r\n\t\t4: [function (require, module, exports) {\r\n// Generated by CoffeeScript 1.9.3\r\n\t\t\tvar $, BOM, CJSX_ESC_COMMENT, CLOSING_TAG, COMMENT, HEREDOC, HEREGEX, JSTOKEN, OPENING_TAG, PRAGMA, ParseTreeBranchNode, ParseTreeLeafNode, Parser, REGEX, SIMPLESTR, TAG_ATTRIBUTES, TRAILING_SPACES, WHITESPACE, compact, count, invertLiterate, last, ref, repeat, starts, throwSyntaxError;\r\n\r\n\t\t\tref = require('./helpers'), count = ref.count, starts = ref.starts, compact = ref.compact, last = ref.last, repeat = ref.repeat, throwSyntaxError = ref.throwSyntaxError, invertLiterate = ref.invertLiterate;\r\n\r\n\t\t\t$ = require('./symbols');\r\n\r\n\t\t\tParseTreeLeafNode = function (type, value) {\r\n\t\t\t\tif (value == null) {\r\n\t\t\t\t\tvalue = null;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tParseTreeBranchNode = function (type, value, children) {\r\n\t\t\t\tif (value == null) {\r\n\t\t\t\t\tvalue = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (children == null) {\r\n\t\t\t\t\tchildren = [];\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tchildren: children\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tmodule.exports = Parser = (function () {\r\n\t\t\t\tfunction Parser() {\r\n\t\t\t\t}\r\n\r\n\t\t\t\tParser.prototype.parse = function (code, opts) {\r\n\t\t\t\t\tvar consumed, i, message, ref1, ref2;\r\n\t\t\t\t\tthis.opts = opts != null ? opts : {};\r\n\t\t\t\t\tthis.parseTree = ParseTreeBranchNode(this.opts.root || $.ROOT);\r\n\t\t\t\t\tthis.activeStates = [this.parseTree];\r\n\t\t\t\t\tthis.chunkLine = 0;\r\n\t\t\t\t\tthis.chunkColumn = 0;\r\n\t\t\t\t\tthis.cjsxPragmaChecked = false;\r\n\t\t\t\t\tcode = this.clean(code);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\twhile ((this.chunk = code.slice(i))) {\r\n\t\t\t\t\t\tif (this.activeStates.length === 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconsumed = ((ref1 = this.currentState()) !== $.CJSX_EL && ref1 !== $.CJSX_ATTRIBUTES ? this.csComment() || this.csHeredoc() || this.csString() || this.csRegex() || this.jsEscaped() : void 0) || this.cjsxStart() || this.cjsxAttribute() || this.cjsxComment() || this.cjsxEscape() || this.cjsxUnescape() || this.cjsxEnd() || this.cjsxText() || this.coffeescriptCode();\r\n\t\t\t\t\t\tref2 = this.getLineAndColumnFromChunk(consumed), this.chunkLine = ref2[0], this.chunkColumn = ref2[1];\r\n\t\t\t\t\t\ti += consumed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((this.activeBranchNode() != null) && this.activeBranchNode() !== this.parseTree) {\r\n\t\t\t\t\t\tmessage = \"Unexpected end of input: unclosed \" + (this.currentState());\r\n\t\t\t\t\t\tthrowSyntaxError(message, {\r\n\t\t\t\t\t\t\tfirst_line: this.chunkLine,\r\n\t\t\t\t\t\t\tfirst_column: this.chunkColumn\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.remainder = code.slice(i);\r\n\t\t\t\t\tif (!this.opts.recursive) {\r\n\t\t\t\t\t\tif (this.remainder.length) {\r\n\t\t\t\t\t\t\tthrowSyntaxError(\"Unexpected return from root state\", {\r\n\t\t\t\t\t\t\t\tfirst_line: this.chunkLine,\r\n\t\t\t\t\t\t\t\tfirst_column: this.chunkColumn\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.parseTree;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.csComment = function () {\r\n\t\t\t\t\tvar comment, here, match, pragmaMatch, prefix;\r\n\t\t\t\t\tif (!(match = this.chunk.match(COMMENT))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcomment = match[0], here = match[1];\r\n\t\t\t\t\tif (!this.cjsxPragmaChecked) {\r\n\t\t\t\t\t\tthis.cjsxPragmaChecked = true;\r\n\t\t\t\t\t\tif (pragmaMatch = comment.match(PRAGMA)) {\r\n\t\t\t\t\t\t\tif (pragmaMatch && pragmaMatch[1] && pragmaMatch[1].length) {\r\n\t\t\t\t\t\t\t\tprefix = pragmaMatch[1];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tprefix = 'React.DOM';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CJSX_PRAGMA, prefix));\r\n\t\t\t\t\t\t\treturn comment.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CS_COMMENT, comment));\r\n\t\t\t\t\treturn comment.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.csHeredoc = function () {\r\n\t\t\t\t\tvar heredoc, match;\r\n\t\t\t\t\tif (!(match = HEREDOC.exec(this.chunk))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\theredoc = match[0];\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CS_HEREDOC, heredoc));\r\n\t\t\t\t\treturn heredoc.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.csString = function () {\r\n\t\t\t\t\tvar quote, string;\r\n\t\t\t\t\tswitch (quote = this.chunk.charAt(0)) {\r\n\t\t\t\t\t\tcase \"'\":\r\n\t\t\t\t\t\t\tstring = SIMPLESTR.exec(this.chunk)[0];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '\"':\r\n\t\t\t\t\t\t\tstring = this.balancedString(this.chunk, '\"');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!string) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CS_STRING, string));\r\n\t\t\t\t\treturn string.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.csRegex = function () {\r\n\t\t\t\t\tvar flags, length, match, ref1, regex;\r\n\t\t\t\t\tif (this.chunk.charAt(0) !== '/') {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (length = this.csHeregex()) {\r\n\t\t\t\t\t\treturn length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(match = REGEX.exec(this.chunk))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tref1 = match, match = ref1[0], regex = ref1[1], flags = ref1[2];\r\n\t\t\t\t\tif (regex.indexOf(\"\\n\") > -1) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (regex === '//') {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CS_REGEX, match));\r\n\t\t\t\t\treturn match.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.csHeregex = function () {\r\n\t\t\t\t\tvar body, flags, heregex, match;\r\n\t\t\t\t\tif (!(match = HEREGEX.exec(this.chunk))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\theregex = match[0], body = match[1], flags = match[2];\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CS_HEREGEX, heregex));\r\n\t\t\t\t\treturn heregex.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.jsEscaped = function () {\r\n\t\t\t\t\tvar match, script;\r\n\t\t\t\t\tif (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscript = match[0];\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.JS_ESC, script));\r\n\t\t\t\t\treturn script.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxStart = function () {\r\n\t\t\t\t\tvar attributesText, input, match, selfClosing, tagName;\r\n\t\t\t\t\tif (!(match = OPENING_TAG.exec(this.chunk))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinput = match[0], tagName = match[1], attributesText = match[2], selfClosing = match[3];\r\n\t\t\t\t\tif (!(selfClosing || this.chunk.indexOf(\"</\" + tagName + \">\", input.length) > -1)) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.pushActiveBranchNode(ParseTreeBranchNode($.CJSX_EL, tagName));\r\n\t\t\t\t\tthis.pushActiveBranchNode(ParseTreeBranchNode($.CJSX_ATTRIBUTES));\r\n\t\t\t\t\treturn 1 + tagName.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxAttribute = function () {\r\n\t\t\t\t\tvar attrName, bareVal, cjsxEscVal, doubleQuotedVal, input, match, singleQuotedVal, spreadAttr, whitespace;\r\n\t\t\t\t\tif (this.currentState() !== $.CJSX_ATTRIBUTES) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.chunk.charAt(0) === '/') {\r\n\t\t\t\t\t\tif (this.chunk.charAt(1) === '>') {\r\n\t\t\t\t\t\t\tthis.popActiveBranchNode();\r\n\t\t\t\t\t\t\tthis.popActiveBranchNode();\r\n\t\t\t\t\t\t\treturn 2;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrowSyntaxError(\"/ without immediately following > in CJSX tag \" + (this.peekActiveState(2).value), {\r\n\t\t\t\t\t\t\t\tfirst_line: this.chunkLine,\r\n\t\t\t\t\t\t\t\tfirst_column: this.chunkColumn\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.chunk.charAt(0) === '>') {\r\n\t\t\t\t\t\tthis.popActiveBranchNode();\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(match = TAG_ATTRIBUTES.exec(this.chunk))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinput = match[0], attrName = match[1], doubleQuotedVal = match[2], singleQuotedVal = match[3], cjsxEscVal = match[4], bareVal = match[5], spreadAttr = match[6], whitespace = match[7];\r\n\t\t\t\t\tif (attrName) {\r\n\t\t\t\t\t\tif (doubleQuotedVal != null) {\r\n\t\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeBranchNode($.CJSX_ATTR_PAIR, null, [ParseTreeLeafNode($.CJSX_ATTR_KEY, \"\\\"\" + attrName + \"\\\"\"), ParseTreeLeafNode($.CJSX_ATTR_VAL, \"\\\"\" + doubleQuotedVal + \"\\\"\")]));\r\n\t\t\t\t\t\t\treturn input.length;\r\n\t\t\t\t\t\t} else if (singleQuotedVal != null) {\r\n\t\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeBranchNode($.CJSX_ATTR_PAIR, null, [ParseTreeLeafNode($.CJSX_ATTR_KEY, \"\\\"\" + attrName + \"\\\"\"), ParseTreeLeafNode($.CJSX_ATTR_VAL, \"'\" + singleQuotedVal + \"'\")]));\r\n\t\t\t\t\t\t\treturn input.length;\r\n\t\t\t\t\t\t} else if (cjsxEscVal) {\r\n\t\t\t\t\t\t\tthis.pushActiveBranchNode(ParseTreeBranchNode($.CJSX_ATTR_PAIR));\r\n\t\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CJSX_ATTR_KEY, \"\\\"\" + attrName + \"\\\"\"));\r\n\t\t\t\t\t\t\treturn input.indexOf('{');\r\n\t\t\t\t\t\t} else if (bareVal) {\r\n\t\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeBranchNode($.CJSX_ATTR_PAIR, null, [ParseTreeLeafNode($.CJSX_ATTR_KEY, \"\\\"\" + attrName + \"\\\"\"), ParseTreeLeafNode($.CJSX_ATTR_VAL, bareVal)]));\r\n\t\t\t\t\t\t\treturn input.length;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeBranchNode($.CJSX_ATTR_PAIR, null, [ParseTreeLeafNode($.CJSX_ATTR_KEY, \"\\\"\" + attrName + \"\\\"\"), ParseTreeLeafNode($.CJSX_ATTR_VAL, 'true')]));\r\n\t\t\t\t\t\t\treturn input.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (spreadAttr) {\r\n\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CJSX_ATTR_SPREAD, spreadAttr));\r\n\t\t\t\t\t\treturn input.length;\r\n\t\t\t\t\t} else if (whitespace != null) {\r\n\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CJSX_WHITESPACE, whitespace));\r\n\t\t\t\t\t\treturn input.length;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn throwSyntaxError(\"Invalid attribute \" + input + \" in CJSX tag \" + (this.peekActiveState(2).value), {\r\n\t\t\t\t\t\t\tfirst_line: this.chunkLine,\r\n\t\t\t\t\t\t\tfirst_column: this.chunkColumn\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxComment = function () {\r\n\t\t\t\t\tvar match;\r\n\t\t\t\t\tmatch = this.chunk.match(CJSX_ESC_COMMENT);\r\n\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CJSX_COMMENT, match[1]));\r\n\t\t\t\t\treturn match[0].length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxEscape = function () {\r\n\t\t\t\t\tvar ref1;\r\n\t\t\t\t\tif (!(this.chunk.charAt(0) === '{' && ((ref1 = this.currentState()) === $.CJSX_EL || ref1 === $.CJSX_ATTR_PAIR))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.pushActiveBranchNode(ParseTreeBranchNode($.CJSX_ESC));\r\n\t\t\t\t\tthis.activeBranchNode().stack = 1;\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxUnescape = function () {\r\n\t\t\t\t\tvar ref1;\r\n\t\t\t\t\tif (!(this.currentState() === $.CJSX_ESC && this.chunk.charAt(0) === '}')) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.activeBranchNode().stack === 0) {\r\n\t\t\t\t\t\tthis.popActiveBranchNode();\r\n\t\t\t\t\t\tif ((ref1 = this.currentState()) === $.CJSX_ATTR_PAIR) {\r\n\t\t\t\t\t\t\tthis.popActiveBranchNode();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxEnd = function () {\r\n\t\t\t\t\tvar input, match, tagName;\r\n\t\t\t\t\tif (this.currentState() !== $.CJSX_EL) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(match = CLOSING_TAG.exec(this.chunk))) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinput = match[0], tagName = match[1];\r\n\t\t\t\t\tif (tagName !== this.activeBranchNode().value) {\r\n\t\t\t\t\t\tthrowSyntaxError(\"opening CJSX tag \" + (this.activeBranchNode().value) + \" doesn't match closing CJSX tag \" + tagName, {\r\n\t\t\t\t\t\t\tfirst_line: this.chunkLine,\r\n\t\t\t\t\t\t\tfirst_column: this.chunkColumn\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.popActiveBranchNode();\r\n\t\t\t\t\treturn input.length;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.cjsxText = function () {\r\n\t\t\t\t\tif (this.currentState() !== $.CJSX_EL) {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.newestNode().type !== $.CJSX_TEXT) {\r\n\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CJSX_TEXT, ''));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.newestNode().value += this.chunk.charAt(0);\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.coffeescriptCode = function () {\r\n\t\t\t\t\tif (this.currentState() === $.CJSX_ESC) {\r\n\t\t\t\t\t\tif (this.chunk.charAt(0) === '{') {\r\n\t\t\t\t\t\t\tthis.activeBranchNode().stack++;\r\n\t\t\t\t\t\t} else if (this.chunk.charAt(0) === '}') {\r\n\t\t\t\t\t\t\tthis.activeBranchNode().stack--;\r\n\t\t\t\t\t\t\tif (this.activeBranchNode().stack === 0) {\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.newestNode().type !== $.CS) {\r\n\t\t\t\t\t\tthis.addLeafNodeToActiveBranch(ParseTreeLeafNode($.CS, ''));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.newestNode().value += this.chunk.charAt(0);\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.activeBranchNode = function () {\r\n\t\t\t\t\treturn last(this.activeStates);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.peekActiveState = function (depth) {\r\n\t\t\t\t\tif (depth == null) {\r\n\t\t\t\t\t\tdepth = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.activeStates.slice(-depth)[0];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.currentState = function () {\r\n\t\t\t\t\treturn this.activeBranchNode().type;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.newestNode = function () {\r\n\t\t\t\t\treturn last(this.activeBranchNode().children) || this.activeBranchNode();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.pushActiveBranchNode = function (node) {\r\n\t\t\t\t\tthis.activeBranchNode().children.push(node);\r\n\t\t\t\t\treturn this.activeStates.push(node);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.popActiveBranchNode = function () {\r\n\t\t\t\t\treturn this.activeStates.pop();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.addLeafNodeToActiveBranch = function (node) {\r\n\t\t\t\t\treturn this.activeBranchNode().children.push(node);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.clean = function (code) {\r\n\t\t\t\t\tvar ref1;\r\n\t\t\t\t\tif (code.charCodeAt(0) === BOM) {\r\n\t\t\t\t\t\tcode = code.slice(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcode = code.replace(/\\r/g, '');\r\n\t\t\t\t\tif ((ref1 = this.opts) != null ? ref1.literate : void 0) {\r\n\t\t\t\t\t\tcode = invertLiterate(code);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn code;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.getLineAndColumnFromChunk = function (offset) {\r\n\t\t\t\t\tvar column, lineCount, lines, string;\r\n\t\t\t\t\tif (offset === 0) {\r\n\t\t\t\t\t\treturn [this.chunkLine, this.chunkColumn];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (offset >= this.chunk.length) {\r\n\t\t\t\t\t\tstring = this.chunk;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstring = this.chunk.slice(0, +(offset - 1) + 1 || 9e9);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlineCount = count(string, '\\n');\r\n\t\t\t\t\tcolumn = this.chunkColumn;\r\n\t\t\t\t\tif (lineCount > 0) {\r\n\t\t\t\t\t\tlines = string.split('\\n');\r\n\t\t\t\t\t\tcolumn = last(lines).length;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcolumn += string.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn [this.chunkLine + lineCount, column];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tParser.prototype.balancedString = function (str, end) {\r\n\t\t\t\t\tvar continueCount, i, j, letter, match, prev, ref1, stack;\r\n\t\t\t\t\tcontinueCount = 0;\r\n\t\t\t\t\tstack = [end];\r\n\t\t\t\t\tfor (i = j = 1, ref1 = str.length; 1 <= ref1 ? j < ref1 : j > ref1; i = 1 <= ref1 ? ++j : --j) {\r\n\t\t\t\t\t\tif (continueCount) {\r\n\t\t\t\t\t\t\t--continueCount;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch (letter = str.charAt(i)) {\r\n\t\t\t\t\t\t\tcase '\\\\':\r\n\t\t\t\t\t\t\t\t++continueCount;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase end:\r\n\t\t\t\t\t\t\t\tstack.pop();\r\n\t\t\t\t\t\t\t\tif (!stack.length) {\r\n\t\t\t\t\t\t\t\t\treturn str.slice(0, +i + 1 || 9e9);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tend = stack[stack.length - 1];\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (end === '}' && (letter === '\"' || letter === \"'\")) {\r\n\t\t\t\t\t\t\tstack.push(end = letter);\r\n\t\t\t\t\t\t} else if (end === '}' && letter === '/' && (match = HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i)))) {\r\n\t\t\t\t\t\t\tcontinueCount += match[0].length - 1;\r\n\t\t\t\t\t\t} else if (end === '}' && letter === '{') {\r\n\t\t\t\t\t\t\tstack.push(end = '}');\r\n\t\t\t\t\t\t} else if (end === '\"' && prev === '#' && letter === '{') {\r\n\t\t\t\t\t\t\tstack.push(end = '}');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tprev = letter;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn throwSyntaxError(\"missing \" + (stack.pop()) + \", starting\");\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn Parser;\r\n\r\n\t\t\t})();\r\n\r\n\t\t\tOPENING_TAG = /^<(@?[-A-Za-z0-9_\\.]+)((?:(?:(?:\\s+[\\w-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|(?:{[\\s\\S]*?})|[^>\\s]+)))|\\s+[\\w-]+|\\s+\\{\\.\\.\\.\\s*?[^{}]+?\\s*?\\})?)*?\\s*)(\\/?)>/;\r\n\r\n\t\t\tCLOSING_TAG = /^<\\/(@?[-A-Za-z0-9_\\.]+)[^>]*>/;\r\n\r\n\t\t\tTAG_ATTRIBUTES = /(?:([-A-Za-z0-9_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:{((?:\\\\.|[\\s\\S])*)})|([^>\\s]+)))?)|(?:\\{\\.\\.\\.(\\s*?[^{}]+?\\s*?)\\})|([\\s\\n]+)/;\r\n\r\n\t\t\tPRAGMA = /^\\s*#\\s*@cjsx\\s+(\\S*)/i;\r\n\r\n\t\t\tCJSX_ESC_COMMENT = /^\\{#(.*)\\}/;\r\n\r\n\t\t\tBOM = 65279;\r\n\r\n\t\t\tWHITESPACE = /^[^\\n\\S]+/;\r\n\r\n\t\t\tCOMMENT = /^###([^#][\\s\\S]*?)(?:###[^\\n\\S]*|###$)|^(?:\\s*#(?!##[^#]).*)+/;\r\n\r\n\t\t\tTRAILING_SPACES = /\\s+$/;\r\n\r\n\t\t\tHEREDOC = /^(\"\"\"|''')((?:\\\\[\\s\\S]|[^\\\\])*?)(?:\\n[^\\n\\S]*)?\\1/;\r\n\r\n\t\t\tSIMPLESTR = /^'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/;\r\n\r\n\t\t\tJSTOKEN = /^`[^\\\\`]*(?:\\\\.[^\\\\`]*)*`/;\r\n\r\n\t\t\tREGEX = /^(\\/(?![\\s=])[^[\\/\\n\\\\]*(?:(?:\\\\[\\s\\S]|\\[[^\\]\\n\\\\]*(?:\\\\[\\s\\S][^\\]\\n\\\\]*)*])[^[\\/\\n\\\\]*)*\\/)([imgy]{0,4})(?!\\w)/;\r\n\r\n\t\t\tHEREGEX = /^\\/{3}((?:\\\\?[\\s\\S])+?)\\/{3}([imgy]{0,4})(?!\\w)/;\r\n\r\n\t\t}, {\"./helpers\": 3, \"./symbols\": 7}],\r\n\t\t5: [function (require, module, exports) {\r\n// Generated by CoffeeScript 1.9.3\r\n\t\t\tvar $, SPACES_ONLY, Serialiser, TEXT_LEADING_WHITESPACE, TEXT_TRAILING_WHITESPACE, WHITESPACE_ONLY, componentClassTagConvention, containsNewlines, entityDecode, exports, find, firstNonWhitespaceChild, genericBranchSerialiser, genericLeafSerialiser, joinList, last, nodeSerialisers, ref, serialise, stringEscape;\r\n\r\n\t\t\tref = require('./helpers'), last = ref.last, find = ref.find;\r\n\r\n\t\t\t$ = require('./symbols');\r\n\r\n\t\t\tstringEscape = require('./stringescape');\r\n\r\n\t\t\tentityDecode = require('./entitydecode');\r\n\r\n\t\t\tmodule.exports = exports = serialise = function (parseTree) {\r\n\t\t\t\treturn new Serialiser().serialise(parseTree);\r\n\t\t\t};\r\n\r\n\t\t\tSerialiser = (function () {\r\n\t\t\t\tfunction Serialiser() {\r\n\t\t\t\t}\r\n\r\n\t\t\t\tSerialiser.prototype.serialise = function (parseTree) {\r\n\t\t\t\t\tvar domObjectParts;\r\n\t\t\t\t\tif (parseTree.children && parseTree.children.length && parseTree.children[0].type === $.CJSX_PRAGMA) {\r\n\t\t\t\t\t\tthis.domObject = parseTree.children[0].value;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.domObject = 'React.DOM';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdomObjectParts = this.domObject.split('.');\r\n\t\t\t\t\tif (domObjectParts.length > 0 && domObjectParts[0] !== '') {\r\n\t\t\t\t\t\tthis.reactObject = domObjectParts[0];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.reactObject = 'React';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.serialiseNode(parseTree);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tSerialiser.prototype.serialiseNode = function (node) {\r\n\t\t\t\t\tvar serialised;\r\n\t\t\t\t\tif (nodeSerialisers[node.type] == null) {\r\n\t\t\t\t\t\tthrow new Error(\"unknown parseTree node type \" + node.type);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tserialised = nodeSerialisers[node.type].call(this, node);\r\n\t\t\t\t\tif (!(typeof serialised === 'string' || serialised === null)) {\r\n\t\t\t\t\t\tthrow new Error(\"serialiser \" + node.type + \" didn\\'t return a string\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn serialised;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tSerialiser.prototype.serialiseSpreadAndPairAttributes = function (children) {\r\n\t\t\t\t\tvar accumulatedWhitespace, assignIndex, assignItem, assigns, assignsWithWhitespace, child, childIndex, flushPairs, j, joinedAssigns, k, lastAssignWithWhitespace, len, len1, pairAttrsBuffer, ref1, trailingWhiteplace;\r\n\t\t\t\t\tassigns = [];\r\n\t\t\t\t\tpairAttrsBuffer = [];\r\n\t\t\t\t\tflushPairs = (function (_this) {\r\n\t\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\t\tvar serialisedChild, serialisedPairs;\r\n\t\t\t\t\t\t\tif (pairAttrsBuffer.length) {\r\n\t\t\t\t\t\t\t\tserialisedChild = _this.serialiseAttributePairs(pairAttrsBuffer);\r\n\t\t\t\t\t\t\t\tif (serialisedChild) {\r\n\t\t\t\t\t\t\t\t\tassigns.push({\r\n\t\t\t\t\t\t\t\t\t\ttype: $.CS,\r\n\t\t\t\t\t\t\t\t\t\tvalue: serialisedChild\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tserialisedPairs = pairAttrsBuffer.map(function (p) {\r\n\t\t\t\t\t\t\t\t\t\treturn _this.serialiseNode(p);\r\n\t\t\t\t\t\t\t\t\t}).join('').replace('\\n', '\\\\\\n');\r\n\t\t\t\t\t\t\t\t\tassigns.push({\r\n\t\t\t\t\t\t\t\t\t\ttype: $.CJSX_WHITESPACE,\r\n\t\t\t\t\t\t\t\t\t\tvalue: serialisedPairs\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn pairAttrsBuffer = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t})(this);\r\n\t\t\t\t\tif (((ref1 = firstNonWhitespaceChild(children)) != null ? ref1.type : void 0) === $.CJSX_ATTR_SPREAD) {\r\n\t\t\t\t\t\tassigns.push({\r\n\t\t\t\t\t\t\ttype: $.CS,\r\n\t\t\t\t\t\t\tvalue: '{}'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (childIndex = j = 0, len = children.length; j < len; childIndex = ++j) {\r\n\t\t\t\t\t\tchild = children[childIndex];\r\n\t\t\t\t\t\tif (child.type === $.CJSX_ATTR_SPREAD) {\r\n\t\t\t\t\t\t\tflushPairs();\r\n\t\t\t\t\t\t\tassigns.push({\r\n\t\t\t\t\t\t\t\ttype: $.CS,\r\n\t\t\t\t\t\t\t\tvalue: child.value\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpairAttrsBuffer.push(child);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tflushPairs();\r\n\t\t\t\t\taccumulatedWhitespace = '';\r\n\t\t\t\t\tassignsWithWhitespace = [];\r\n\t\t\t\t\tfor (assignIndex = k = 0, len1 = assigns.length; k < len1; assignIndex = ++k) {\r\n\t\t\t\t\t\tassignItem = assigns[assignIndex];\r\n\t\t\t\t\t\tif (assignItem != null) {\r\n\t\t\t\t\t\t\tif (assignItem.type === $.CJSX_WHITESPACE) {\r\n\t\t\t\t\t\t\t\taccumulatedWhitespace += this.serialiseNode(assignItem);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tassignsWithWhitespace.push(accumulatedWhitespace + this.serialiseNode(assignItem));\r\n\t\t\t\t\t\t\t\taccumulatedWhitespace = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (assignsWithWhitespace.length) {\r\n\t\t\t\t\t\tlastAssignWithWhitespace = assignsWithWhitespace.pop();\r\n\t\t\t\t\t\ttrailingWhiteplace = accumulatedWhitespace.replace('\\\\\\n', '\\n');\r\n\t\t\t\t\t\tassignsWithWhitespace.push(lastAssignWithWhitespace + trailingWhiteplace);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tjoinedAssigns = joinList(assignsWithWhitespace);\r\n\t\t\t\t\treturn \"Object.assign(\" + (joinList(assignsWithWhitespace)) + \")\";\r\n\t\t\t\t};\r\n\r\n\t\t\t\tSerialiser.prototype.serialiseAttributePairs = function (children) {\r\n\t\t\t\t\tvar child, childIndex, indexOfLastSemanticChild, isBeforeLastSemanticChild, ref1, semanticChildren, serialisedChild, serialisedChildren, whitespaceChildren;\r\n\t\t\t\t\tref1 = children.reduce(function (partitionedChildren, child) {\r\n\t\t\t\t\t\tif (child.type === $.CJSX_WHITESPACE) {\r\n\t\t\t\t\t\t\tpartitionedChildren[0].push(child);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpartitionedChildren[1].push(child);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn partitionedChildren;\r\n\t\t\t\t\t}, [[], []]), whitespaceChildren = ref1[0], semanticChildren = ref1[1];\r\n\t\t\t\t\tindexOfLastSemanticChild = children.lastIndexOf(last(semanticChildren));\r\n\t\t\t\t\tisBeforeLastSemanticChild = function (childIndex) {\r\n\t\t\t\t\t\treturn childIndex < indexOfLastSemanticChild;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif (semanticChildren.length) {\r\n\t\t\t\t\t\tserialisedChildren = (function () {\r\n\t\t\t\t\t\t\tvar j, len, results;\r\n\t\t\t\t\t\t\tresults = [];\r\n\t\t\t\t\t\t\tfor (childIndex = j = 0, len = children.length; j < len; childIndex = ++j) {\r\n\t\t\t\t\t\t\t\tchild = children[childIndex];\r\n\t\t\t\t\t\t\t\tserialisedChild = this.serialiseNode(child);\r\n\t\t\t\t\t\t\t\tif (child.type === $.CJSX_WHITESPACE) {\r\n\t\t\t\t\t\t\t\t\tif (containsNewlines(serialisedChild)) {\r\n\t\t\t\t\t\t\t\t\t\tif (isBeforeLastSemanticChild(childIndex)) {\r\n\t\t\t\t\t\t\t\t\t\t\tresults.push(serialisedChild.replace('\\n', ' \\\\\\n'));\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tresults.push(serialisedChild);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tresults.push(null);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else if (isBeforeLastSemanticChild(childIndex)) {\r\n\t\t\t\t\t\t\t\t\tresults.push(serialisedChild + ', ');\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tresults.push(serialisedChild);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t}).call(this);\r\n\t\t\t\t\t\treturn '{' + serialisedChildren.join('') + '}';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn Serialiser;\r\n\r\n\t\t\t})();\r\n\r\n\t\t\tgenericBranchSerialiser = function (node) {\r\n\t\t\t\treturn node.children.map((function (_this) {\r\n\t\t\t\t\treturn function (child) {\r\n\t\t\t\t\t\treturn _this.serialiseNode(child);\r\n\t\t\t\t\t};\r\n\t\t\t\t})(this)).join('');\r\n\t\t\t};\r\n\r\n\t\t\tgenericLeafSerialiser = function (node) {\r\n\t\t\t\treturn node.value;\r\n\t\t\t};\r\n\r\n\t\t\tcomponentClassTagConvention = /(^[A-Z@]|\\.)/;\r\n\r\n\t\t\tnodeSerialisers = {\r\n\t\t\t\tROOT: genericBranchSerialiser,\r\n\t\t\t\tCJSX_PRAGMA: function () {\r\n\t\t\t\t\treturn \"`/** @jsx \" + this.domObject + \" */`\";\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_EL: function (node) {\r\n\t\t\t\t\tvar accumulatedWhitespace, child, element, j, len, ref1, serialisedChild, serialisedChildren;\r\n\t\t\t\t\tserialisedChildren = [];\r\n\t\t\t\t\taccumulatedWhitespace = '';\r\n\t\t\t\t\tref1 = node.children;\r\n\t\t\t\t\tfor (j = 0, len = ref1.length; j < len; j++) {\r\n\t\t\t\t\t\tchild = ref1[j];\r\n\t\t\t\t\t\tserialisedChild = this.serialiseNode(child);\r\n\t\t\t\t\t\tif (child != null) {\r\n\t\t\t\t\t\t\tif (serialisedChild.length === 0 || WHITESPACE_ONLY.test(serialisedChild)) {\r\n\t\t\t\t\t\t\t\taccumulatedWhitespace += serialisedChild;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tserialisedChildren.push(accumulatedWhitespace + serialisedChild);\r\n\t\t\t\t\t\t\t\taccumulatedWhitespace = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (serialisedChildren.length) {\r\n\t\t\t\t\t\tserialisedChildren[serialisedChildren.length - 1] += accumulatedWhitespace;\r\n\t\t\t\t\t\taccumulatedWhitespace = '';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (componentClassTagConvention.test(node.value)) {\r\n\t\t\t\t\t\telement = node.value;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement = '\"' + node.value + '\"';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.reactObject + \".createElement(\" + element + \", \" + (joinList(serialisedChildren)) + \")\";\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_COMMENT: function (node) {\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_ESC: function (node) {\r\n\t\t\t\t\tvar childrenSerialised;\r\n\t\t\t\t\tchildrenSerialised = node.children.map((function (_this) {\r\n\t\t\t\t\t\treturn function (child) {\r\n\t\t\t\t\t\t\treturn _this.serialiseNode(child);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t})(this)).join('');\r\n\t\t\t\t\treturn '(' + childrenSerialised + ')';\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_ATTRIBUTES: function (node) {\r\n\t\t\t\t\tif (node.children.some(function (child) {\r\n\t\t\t\t\t\t\treturn child.type === $.CJSX_ATTR_SPREAD;\r\n\t\t\t\t\t\t})) {\r\n\t\t\t\t\t\treturn this.serialiseSpreadAndPairAttributes(node.children);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn this.serialiseAttributePairs(node.children) || 'null';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_ATTR_PAIR: function (node) {\r\n\t\t\t\t\treturn node.children.map((function (_this) {\r\n\t\t\t\t\t\treturn function (child) {\r\n\t\t\t\t\t\t\treturn _this.serialiseNode(child);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t})(this)).join(': ');\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_ATTR_SPREAD: function (node) {\r\n\t\t\t\t\treturn node.value;\r\n\t\t\t\t},\r\n\t\t\t\tCS: genericLeafSerialiser,\r\n\t\t\t\tCS_COMMENT: genericLeafSerialiser,\r\n\t\t\t\tCS_HEREDOC: genericLeafSerialiser,\r\n\t\t\t\tCS_STRING: genericLeafSerialiser,\r\n\t\t\t\tCS_REGEX: genericLeafSerialiser,\r\n\t\t\t\tCS_HEREGEX: genericLeafSerialiser,\r\n\t\t\t\tJS_ESC: genericLeafSerialiser,\r\n\t\t\t\tCJSX_WHITESPACE: genericLeafSerialiser,\r\n\t\t\t\tCJSX_TEXT: function (node) {\r\n\t\t\t\t\tvar escapedText, leftSpace, leftTrim, rightSpace, rightTrim, text, trimmedText;\r\n\t\t\t\t\ttext = node.value;\r\n\t\t\t\t\tif (containsNewlines(text)) {\r\n\t\t\t\t\t\tif (WHITESPACE_ONLY.test(text)) {\r\n\t\t\t\t\t\t\treturn text;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tleftSpace = text.match(TEXT_LEADING_WHITESPACE);\r\n\t\t\t\t\t\t\trightSpace = text.match(TEXT_TRAILING_WHITESPACE);\r\n\t\t\t\t\t\t\tif (leftSpace) {\r\n\t\t\t\t\t\t\t\tleftTrim = text.indexOf('\\n');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tleftTrim = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (rightSpace) {\r\n\t\t\t\t\t\t\t\trightTrim = text.lastIndexOf('\\n') + 1;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\trightTrim = text.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttrimmedText = text.substring(leftTrim, rightTrim);\r\n\t\t\t\t\t\t\tescapedText = stringEscape(entityDecode(trimmedText), {\r\n\t\t\t\t\t\t\t\tpreserveNewlines: true\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn '\"\"\"' + escapedText + '\"\"\"';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (text === '') {\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn '\"' + stringEscape(entityDecode(text)) + '\"';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tCJSX_ATTR_KEY: genericLeafSerialiser,\r\n\t\t\t\tCJSX_ATTR_VAL: genericLeafSerialiser\r\n\t\t\t};\r\n\r\n\t\t\tfirstNonWhitespaceChild = function (children) {\r\n\t\t\t\treturn find.call(children, function (child) {\r\n\t\t\t\t\treturn child.type !== $.CJSX_WHITESPACE;\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tcontainsNewlines = function (text) {\r\n\t\t\t\treturn text.indexOf('\\n') > -1;\r\n\t\t\t};\r\n\r\n\t\t\tjoinList = function (items) {\r\n\t\t\t\tvar i, output;\r\n\t\t\t\toutput = items[items.length - 1];\r\n\t\t\t\ti = items.length - 2;\r\n\t\t\t\twhile (i >= 0) {\r\n\t\t\t\t\tif (output.charAt(0) === '\\n') {\r\n\t\t\t\t\t\toutput = items[i] + ',' + output;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toutput = items[i] + ', ' + output;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti--;\r\n\t\t\t\t}\r\n\t\t\t\treturn output;\r\n\t\t\t};\r\n\r\n\t\t\tSPACES_ONLY = /^\\s+$/;\r\n\r\n\t\t\tWHITESPACE_ONLY = /^[\\n\\s]+$/;\r\n\r\n\t\t\tTEXT_LEADING_WHITESPACE = /^\\s*?\\n\\s*/;\r\n\r\n\t\t\tTEXT_TRAILING_WHITESPACE = /\\s*?\\n\\s*?$/;\r\n\r\n\t\t\texports.Serialiser = Serialiser;\r\n\r\n\t\t\texports.nodeSerialisers = nodeSerialisers;\r\n\r\n\t\t}, {\"./entitydecode\": 2, \"./helpers\": 3, \"./stringescape\": 6, \"./symbols\": 7}],\r\n\t\t6: [function (require, module, exports) {\r\n\r\n\t\t\tvar hex = '0123456789abcdef'.split('');\r\n\r\n\t\t\tmodule.exports = function stringEncode(input, opts) {\r\n\t\t\t\topts = opts || {};\r\n\t\t\t\tvar escaped = \"\";\r\n\r\n\t\t\t\tfor (var i = 0; i < input.length; i++) {\r\n\t\t\t\t\tescaped = escaped + encodeChar(input.charAt(i), opts.preserveNewlines);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn escaped;\r\n\t\t\t}\r\n\r\n\t\t\tfunction encodeChar(inputChar, preserveNewlines) {\r\n\t\t\t\tvar character = inputChar.charAt(0);\r\n\t\t\t\tvar characterCode = inputChar.charCodeAt(0);\r\n\r\n\t\t\t\tswitch (character) {\r\n\t\t\t\t\tcase '\\n':\r\n\t\t\t\t\t\tif (!preserveNewlines) return \"\\\\n\";\r\n\t\t\t\t\t\telse return character;\r\n\t\t\t\t\tcase '\\r':\r\n\t\t\t\t\t\tif (!preserveNewlines) return \"\\\\r\";\r\n\t\t\t\t\t\telse return character;\r\n\t\t\t\t\tcase '\\'':\r\n\t\t\t\t\t\treturn \"\\\\'\";\r\n\t\t\t\t\tcase '\"':\r\n\t\t\t\t\t\treturn \"\\\\\\\"\";\r\n\t\t\t\t\tcase '\\&':\r\n\t\t\t\t\t\treturn \"\\\\&\";\r\n\t\t\t\t\tcase '\\\\':\r\n\t\t\t\t\t\treturn \"\\\\\\\\\";\r\n\t\t\t\t\tcase '\\t':\r\n\t\t\t\t\t\treturn \"\\\\t\";\r\n\t\t\t\t\tcase '\\b':\r\n\t\t\t\t\t\treturn \"\\\\b\";\r\n\t\t\t\t\tcase '\\f':\r\n\t\t\t\t\t\treturn \"\\\\f\";\r\n\t\t\t\t\tcase '/':\r\n\t\t\t\t\t\treturn \"\\\\x2F\";\r\n\t\t\t\t\tcase '<':\r\n\t\t\t\t\t\treturn \"\\\\x3C\";\r\n\t\t\t\t\tcase '>':\r\n\t\t\t\t\t\treturn \"\\\\x3E\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn inputChar;\r\n\t\t\t}\r\n\r\n\t\t}, {}],\r\n\t\t7: [function (require, module, exports) {\r\n// Generated by CoffeeScript 1.9.3\r\n\t\t\tmodule.exports = {\r\n\t\t\t\tROOT: 'ROOT',\r\n\t\t\t\tCJSX_EL: 'CJSX_EL',\r\n\t\t\t\tCJSX_ESC: 'CJSX_ESC',\r\n\t\t\t\tCJSX_ATTRIBUTES: 'CJSX_ATTRIBUTES',\r\n\t\t\t\tCJSX_ATTR_PAIR: 'CJSX_ATTR_PAIR',\r\n\t\t\t\tCS: 'CS',\r\n\t\t\t\tCS_COMMENT: 'CS_COMMENT',\r\n\t\t\t\tCS_HEREDOC: 'CS_HEREDOC',\r\n\t\t\t\tCS_STRING: 'CS_STRING',\r\n\t\t\t\tCS_REGEX: 'CS_REGEX',\r\n\t\t\t\tCS_HEREGEX: 'CS_HEREGEX',\r\n\t\t\t\tJS_ESC: 'JS_ESC',\r\n\t\t\t\tCJSX_WHITESPACE: 'CJSX_WHITESPACE',\r\n\t\t\t\tCJSX_TEXT: 'CJSX_TEXT',\r\n\t\t\t\tCJSX_ATTR_KEY: 'CJSX_ATTR_KEY',\r\n\t\t\t\tCJSX_ATTR_VAL: 'CJSX_ATTR_VAL',\r\n\t\t\t\tCJSX_ATTR_SPREAD: 'CJSX_ATTR_SPREAD',\r\n\t\t\t\tCJSX_START: 'CJSX_START',\r\n\t\t\t\tCJSX_END: 'CJSX_END',\r\n\t\t\t\tCJSX_COMMENT: 'CJSX_COMMENT',\r\n\t\t\t\tCJSX_ESC_START: 'CJSX_ESC_START',\r\n\t\t\t\tCJSX_ESC_END: 'CJSX_ESC_END',\r\n\t\t\t\tCJSX_PRAGMA: 'CJSX_PRAGMA'\r\n\t\t\t};\r\n\r\n\t\t}, {}],\r\n\t\t8: [function (require, module, exports) {\r\n// Generated by CoffeeScript 1.9.3\r\n\t\t\tvar Parser, serialise;\r\n\r\n\t\t\tParser = require('./parser');\r\n\r\n\t\t\tserialise = require('./serialiser');\r\n\r\n\t\t\tmodule.exports.transform = function (code, opts) {\r\n\t\t\t\treturn serialise(new Parser().parse(code, opts));\r\n\t\t\t};\r\n\r\n\t\t}, {\"./parser\": 4, \"./serialiser\": 5}],\r\n\t\t9: [function (require, module, exports) {\r\n// shim for using process in browser\r\n\r\n\t\t\tvar process = module.exports = {};\r\n\r\n\t\t\tprocess.nextTick = (function () {\r\n\t\t\t\tvar canSetImmediate = typeof window !== 'undefined'\r\n\t\t\t\t\t&& window.setImmediate;\r\n\t\t\t\tvar canPost = typeof window !== 'undefined'\r\n\t\t\t\t\t\t&& window.postMessage && window.addEventListener\r\n\t\t\t\t\t;\r\n\r\n\t\t\t\tif (canSetImmediate) {\r\n\t\t\t\t\treturn function (f) {\r\n\t\t\t\t\t\treturn window.setImmediate(f)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (canPost) {\r\n\t\t\t\t\tvar queue = [];\r\n\t\t\t\t\twindow.addEventListener('message', function (ev) {\r\n\t\t\t\t\t\tvar source = ev.source;\r\n\t\t\t\t\t\tif ((source === window || source === null) && ev.data === 'process-tick') {\r\n\t\t\t\t\t\t\tev.stopPropagation();\r\n\t\t\t\t\t\t\tif (queue.length > 0) {\r\n\t\t\t\t\t\t\t\tvar fn = queue.shift();\r\n\t\t\t\t\t\t\t\tfn();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\treturn function nextTick(fn) {\r\n\t\t\t\t\t\tqueue.push(fn);\r\n\t\t\t\t\t\twindow.postMessage('process-tick', '*');\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn function nextTick(fn) {\r\n\t\t\t\t\tsetTimeout(fn, 0);\r\n\t\t\t\t};\r\n\t\t\t})();\r\n\r\n\t\t\tprocess.title = 'browser';\r\n\t\t\tprocess.browser = true;\r\n\t\t\tprocess.env = {};\r\n\t\t\tprocess.argv = [];\r\n\r\n\t\t\tfunction noop() {\r\n\t\t\t}\r\n\r\n\t\t\tprocess.on = noop;\r\n\t\t\tprocess.addListener = noop;\r\n\t\t\tprocess.once = noop;\r\n\t\t\tprocess.off = noop;\r\n\t\t\tprocess.removeListener = noop;\r\n\t\t\tprocess.removeAllListeners = noop;\r\n\t\t\tprocess.emit = noop;\r\n\r\n\t\t\tprocess.binding = function (name) {\r\n\t\t\t\tthrow new Error('process.binding is not supported');\r\n\t\t\t}\r\n\r\n// TODO(shtylman)\r\n\t\t\tprocess.cwd = function () {\r\n\t\t\t\treturn '/'\r\n\t\t\t};\r\n\t\t\tprocess.chdir = function (dir) {\r\n\t\t\t\tthrow new Error('process.chdir is not supported');\r\n\t\t\t};\r\n\r\n\t\t}, {}]\r\n\t}, {}, [1])(1)\r\n});"],"file":"coffee-react.js"}