(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("grapesjs"));
	else if(typeof define === 'function' && define.amd)
		define(["grapesjs"], factory);
	else if(typeof exports === 'object')
		exports["grapesjs-plugin-nc"] = factory(require("grapesjs"));
	else
		root["grapesjs-plugin-nc"] = factory(root["grapesjs"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_26__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 25);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/**
 * Ensure some object is a coerced to a string
 **/
module.exports = function makeString(object) {
  if (object == null) return '';
  return '' + object;
};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var defaultToWhiteSpace = __webpack_require__(6);
var nativeTrim = String.prototype.trim;

module.exports = function trim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrim) return nativeTrim.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');
};


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}());

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9), __webpack_require__(28)(module)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var strRepeat = __webpack_require__(20);

module.exports = function pad(str, length, padStr, type) {
  str = makeString(str);
  length = ~~length;

  var padlen = 0;

  if (!padStr)
    padStr = ' ';
  else if (padStr.length > 1)
    padStr = padStr.charAt(0);

  switch (type) {
  case 'right':
    padlen = length - str.length;
    return str + strRepeat(padStr, padlen);
  case 'both':
    padlen = length - str.length;
    return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));
  default: // 'left'
    padlen = length - str.length;
    return strRepeat(padStr, padlen) + str;
  }
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
* Underscore.string
* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
* Underscore.string is freely distributable under the terms of the MIT license.
* Documentation: https://github.com/epeli/underscore.string
* Some code is borrowed from MooTools and Alexandru Marasteanu.
* Version '3.3.4'
* @preserve
*/



function s(value) {
  /* jshint validthis: true */
  if (!(this instanceof s)) return new s(value);
  this._wrapped = value;
}

s.VERSION = '3.3.4';

s.isBlank          = __webpack_require__(10);
s.stripTags        = __webpack_require__(31);
s.capitalize       = __webpack_require__(5);
s.decapitalize     = __webpack_require__(11);
s.chop             = __webpack_require__(32);
s.trim             = __webpack_require__(1);
s.clean            = __webpack_require__(33);
s.cleanDiacritics  = __webpack_require__(13);
s.count            = __webpack_require__(34);
s.chars            = __webpack_require__(7);
s.swapCase         = __webpack_require__(35);
s.escapeHTML       = __webpack_require__(36);
s.unescapeHTML     = __webpack_require__(38);
s.splice           = __webpack_require__(14);
s.insert           = __webpack_require__(40);
s.replaceAll       = __webpack_require__(41);
s.include          = __webpack_require__(42);
s.join             = __webpack_require__(43);
s.lines            = __webpack_require__(44);
s.dedent           = __webpack_require__(45);
s.reverse          = __webpack_require__(46);
s.startsWith       = __webpack_require__(47);
s.endsWith         = __webpack_require__(48);
s.pred             = __webpack_require__(49);
s.succ             = __webpack_require__(50);
s.titleize         = __webpack_require__(51);
s.camelize         = __webpack_require__(17);
s.underscored      = __webpack_require__(18);
s.dasherize        = __webpack_require__(19);
s.classify         = __webpack_require__(52);
s.humanize         = __webpack_require__(53);
s.ltrim            = __webpack_require__(54);
s.rtrim            = __webpack_require__(8);
s.truncate         = __webpack_require__(55);
s.prune            = __webpack_require__(56);
s.words            = __webpack_require__(57);
s.pad              = __webpack_require__(3);
s.lpad             = __webpack_require__(58);
s.rpad             = __webpack_require__(59);
s.lrpad            = __webpack_require__(60);
s.sprintf          = __webpack_require__(61);
s.vsprintf         = __webpack_require__(62);
s.toNumber         = __webpack_require__(63);
s.numberFormat     = __webpack_require__(64);
s.strRight         = __webpack_require__(65);
s.strRightBack     = __webpack_require__(66);
s.strLeft          = __webpack_require__(67);
s.strLeftBack      = __webpack_require__(68);
s.toSentence       = __webpack_require__(23);
s.toSentenceSerial = __webpack_require__(69);
s.slugify          = __webpack_require__(70);
s.surround         = __webpack_require__(24);
s.quote            = __webpack_require__(71);
s.unquote          = __webpack_require__(72);
s.repeat           = __webpack_require__(73);
s.naturalCmp       = __webpack_require__(74);
s.levenshtein      = __webpack_require__(75);
s.toBoolean        = __webpack_require__(76);
s.exports          = __webpack_require__(77);
s.escapeRegExp     = __webpack_require__(12);
s.wrap             = __webpack_require__(78);
s.map              = __webpack_require__(79);

// Aliases
s.strip     = s.trim;
s.lstrip    = s.ltrim;
s.rstrip    = s.rtrim;
s.center    = s.lrpad;
s.rjust     = s.lpad;
s.ljust     = s.rpad;
s.contains  = s.include;
s.q         = s.quote;
s.toBool    = s.toBoolean;
s.camelcase = s.camelize;
s.mapChars  = s.map;


// Implement chaining
s.prototype = {
  value: function value() {
    return this._wrapped;
  }
};

function fn2method(key, fn) {
  if (typeof fn !== 'function') return;
  s.prototype[key] = function() {
    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));
    var res = fn.apply(null, args);
    // if the result is non-string stop the chain and return the value
    return typeof res === 'string' ? new s(res) : res;
  };
}

// Copy functions to instance methods for chaining
for (var key in s) fn2method(key, s[key]);

fn2method('tap', function tap(string, fn) {
  return fn(string);
});

function prototype2method(methodName) {
  fn2method(methodName, function(context) {
    var args = Array.prototype.slice.call(arguments, 1);
    return String.prototype[methodName].apply(context, args);
  });
}

var prototypeMethods = [
  'toUpperCase',
  'toLowerCase',
  'split',
  'replace',
  'slice',
  'substring',
  'substr',
  'concat'
];

for (var method in prototypeMethods) prototype2method(prototypeMethods[method]);


module.exports = s;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function capitalize(str, lowercaseRest) {
  str = makeString(str);
  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();

  return str.charAt(0).toUpperCase() + remainingChars;
};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var escapeRegExp = __webpack_require__(12);

module.exports = function defaultToWhiteSpace(characters) {
  if (characters == null)
    return '\\s';
  else if (characters.source)
    return characters.source;
  else
    return '[' + escapeRegExp(characters) + ']';
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function chars(str) {
  return makeString(str).split('');
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var defaultToWhiteSpace = __webpack_require__(6);
var nativeTrimRight = String.prototype.trimRight;

module.exports = function rtrim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp(characters + '+$'), '');
};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function isBlank(str) {
  return (/^\s*$/).test(makeString(str));
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function decapitalize(str) {
  str = makeString(str);
  return str.charAt(0).toLowerCase() + str.slice(1);
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function escapeRegExp(str) {
  return makeString(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {


var makeString = __webpack_require__(0);

var from  = 'ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž',
  to    = 'aaaaaaaaaccceeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz';

from += from.toUpperCase();
to += to.toUpperCase();

to = to.split('');

// for tokens requireing multitoken output
from += 'ß';
to.push('ss');


module.exports = function cleanDiacritics(str) {
  return makeString(str).replace(/.{1}/g, function(c){
    var index = from.indexOf(c);
    return index === -1 ? c : to[index];
  });
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var chars = __webpack_require__(7);

module.exports = function splice(str, i, howmany, substr) {
  var arr = chars(str);
  arr.splice(~~i, ~~howmany, substr);
  return arr.join('');
};


/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = function toPositive(number) {
  return number < 0 ? 0 : (+number || 0);
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function adjacent(str, direction) {
  str = makeString(str);
  if (str.length === 0) {
    return '';
  }
  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var trim = __webpack_require__(1);
var decap = __webpack_require__(11);

module.exports = function camelize(str, decapitalize) {
  str = trim(str).replace(/[-_\s]+(.)?/g, function(match, c) {
    return c ? c.toUpperCase() : '';
  });

  if (decapitalize === true) {
    return decap(str);
  } else {
    return str;
  }
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var trim = __webpack_require__(1);

module.exports = function underscored(str) {
  return trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var trim = __webpack_require__(1);

module.exports = function dasherize(str) {
  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = function strRepeat(str, qty){
  if (qty < 1) return '';
  var result = '';
  while (qty > 0) {
    if (qty & 1) result += str;
    qty >>= 1, str += str;
  }
  return result;
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/* global window, exports, define */

!function () {
    'use strict';

    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    };

    function sprintf(key) {
        // `arguments` is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments);
    }

    function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []));
    }

    function sprintf_format(parse_tree, argv) {
        var cursor = 1,
            tree_length = parse_tree.length,
            arg,
            output = '',
            i,
            k,
            match,
            pad,
            pad_character,
            pad_length,
            is_positive,
            sign;
        for (i = 0; i < tree_length; i++) {
            if (typeof parse_tree[i] === 'string') {
                output += parse_tree[i];
            } else if (Array.isArray(parse_tree[i])) {
                match = parse_tree[i]; // convenience purposes only
                if (match[2]) {
                    // keyword argument
                    arg = argv[cursor];
                    for (k = 0; k < match[2].length; k++) {
                        if (!arg.hasOwnProperty(match[2][k])) {
                            throw new Error(sprintf('[sprintf] property "%s" does not exist', match[2][k]));
                        }
                        arg = arg[match[2][k]];
                    }
                } else if (match[1]) {
                    // positional argument (explicit)
                    arg = argv[match[1]];
                } else {
                    // positional argument (implicit)
                    arg = argv[cursor++];
                }

                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && arg instanceof Function) {
                    arg = arg();
                }

                if (re.numeric_arg.test(match[8]) && typeof arg !== 'number' && isNaN(arg)) {
                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));
                }

                if (re.number.test(match[8])) {
                    is_positive = arg >= 0;
                }

                switch (match[8]) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2);
                        break;
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10));
                        break;
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10);
                        break;
                    case 'j':
                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0);
                        break;
                    case 'e':
                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential();
                        break;
                    case 'f':
                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                        break;
                    case 'g':
                        arg = match[7] ? String(Number(arg.toPrecision(match[7]))) : parseFloat(arg);
                        break;
                    case 'o':
                        arg = (parseInt(arg, 10) >>> 0).toString(8);
                        break;
                    case 's':
                        arg = String(arg);
                        arg = match[7] ? arg.substring(0, match[7]) : arg;
                        break;
                    case 't':
                        arg = String(!!arg);
                        arg = match[7] ? arg.substring(0, match[7]) : arg;
                        break;
                    case 'T':
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                        arg = match[7] ? arg.substring(0, match[7]) : arg;
                        break;
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0;
                        break;
                    case 'v':
                        arg = arg.valueOf();
                        arg = match[7] ? arg.substring(0, match[7]) : arg;
                        break;
                    case 'x':
                        arg = (parseInt(arg, 10) >>> 0).toString(16);
                        break;
                    case 'X':
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                        break;
                }
                if (re.json.test(match[8])) {
                    output += arg;
                } else {
                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
                        sign = is_positive ? '+' : '-';
                        arg = arg.toString().replace(re.sign, '');
                    } else {
                        sign = '';
                    }
                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' ';
                    pad_length = match[6] - (sign + arg).length;
                    pad = match[6] ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';
                    output += match[5] ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;
                }
            }
        }
        return output;
    }

    var sprintf_cache = Object.create(null);

    function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt];
        }

        var _fmt = fmt,
            match,
            parse_tree = [],
            arg_names = 0;
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree.push(match[0]);
            } else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree.push('%');
            } else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1;
                    var field_list = [],
                        replacement_field = match[2],
                        field_match = [];
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1]);
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1]);
                            } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1]);
                            } else {
                                throw new SyntaxError('[sprintf] failed to parse named argument key');
                            }
                        }
                    } else {
                        throw new SyntaxError('[sprintf] failed to parse named argument key');
                    }
                    match[2] = field_list;
                } else {
                    arg_names |= 2;
                }
                if (arg_names === 3) {
                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');
                }
                parse_tree.push(match);
            } else {
                throw new SyntaxError('[sprintf] unexpected placeholder');
            }
            _fmt = _fmt.substring(match[0].length);
        }
        return sprintf_cache[fmt] = parse_tree;
    }

    /**
     * export to either browser or node.js
     */
    /* eslint-disable quote-props */
    if (true) {
        exports['sprintf'] = sprintf;
        exports['vsprintf'] = vsprintf;
    }
    if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf;
        window['vsprintf'] = vsprintf;

        if (true) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                return {
                    'sprintf': sprintf,
                    'vsprintf': vsprintf
                };
            }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
    }
    /* eslint-enable quote-props */
}();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var rtrim = __webpack_require__(8);

module.exports = function toSentence(array, separator, lastSeparator, serial) {
  separator = separator || ', ';
  lastSeparator = lastSeparator || ' and ';
  var a = array.slice(),
    lastMember = a.pop();

  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;

  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = function surround(str, wrapper) {
  return [wrapper, str, wrapper].join('');
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _grapesjs = __webpack_require__(26);

var _grapesjs2 = _interopRequireDefault(_grapesjs);

var _commands = __webpack_require__(27);

var _commands2 = _interopRequireDefault(_commands);

var _traits = __webpack_require__(29);

var _traits2 = _interopRequireDefault(_traits);

var _components = __webpack_require__(30);

var _components2 = _interopRequireDefault(_components);

var _blocks = __webpack_require__(82);

var _blocks2 = _interopRequireDefault(_blocks);

var _devices = __webpack_require__(83);

var _devices2 = _interopRequireDefault(_devices);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _grapesjs2.default.plugins.add('grapesjs-plugin-nc', function (editor) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  window.editor = editor;

  var opts_blocks = opts.blocks || {};
  var opts_labels = opts.labels || {};
  var opts_categories = opts.blockCategories || {};
  delete opts['blocks'];
  delete opts['labels'];
  delete opts['blockCategories'];

  var default_blocks = {
    default: true,
    text: true,
    link: true,
    image: true,
    // LAYOUT
    container: true,
    row: true,
    column: true,
    column_break: true,
    media_object: true,
    // COMPONENTS
    alert: true,
    badge: true,
    button: true,
    button_group: true,
    button_toolbar: true,
    card: true,
    card_container: true,
    collapse: true,
    dropdown: true,
    // TYPOGRAPHY
    header: true,
    paragraph: true,
    // BASIC
    list: true
  };

  var default_labels = {
    // LAYOUT
    container: 'Container',
    row: 'Row',
    column: 'Column',
    column_break: 'Column Break',
    media_object: 'Media Object',
    // COMPONENTS
    alert: 'Alert',
    badge: 'Badge',
    button: 'Button',
    button_group: 'Button Group',
    button_toolbar: 'Button Toolbar',
    card: 'Card',
    card_container: 'Card Container',
    collapse: 'Collapse',
    dropdown: 'Dropdown',
    dropdown_menu: 'Dropdown Menu',
    dropdown_item: 'Dropdown Item',
    // TYPOGRAPHY
    text: 'Text',
    header: 'Header',
    paragraph: 'Paragraph',
    // BASIC
    image: 'Image',
    link: 'Link',
    list: 'Simple List'
  };

  var default_categories = {
    'layout': true,
    'components': true,
    'typography': true,
    'basic': true
  };

  var options = _extends({
    blocks: Object.assign(default_blocks, opts_blocks),
    labels: Object.assign(default_labels, opts_labels),
    blockCategories: Object.assign(default_categories, opts_categories),
    gridDevices: true,
    gridDevicesPanel: false
  }, opts);

  editor.addComponents('\n    <style>\n\n      /* Layout */\n\n      .gjs-dashed .container, .gjs-dashed .container-fluid,\n      .gjs-dashed .row,\n      .gjs-dashed .col, .gjs-dashed [class^="col-"] {\n        min-height: 1.5rem !important;\n      }\n      .gjs-dashed .w-100 {\n        min-height: .25rem !important;\n        background-color: rgba(0,0,0,0.1);\n      }\n      .gjs-dashed img {\n        min-width: 25px;\n        min-height: 25px;\n        background-color: rgba(0,0,0,0.5);\n      }\n\n      /* Components */\n      \n      .gjs-dashed .btn-group,\n      .gjs-dashed .btn-toolbar {\n        padding-right: 1.5rem !important;\n        min-height: 1.5rem !important;\n      }\n      .gjs-dashed .card,\n      .gjs-dashed .card-group, .gjs-dashed .card-deck, .gjs-dashed .card-columns {\n        min-height: 1.5rem !important;\n      }\n      .gjs-dashed .collapse {\n        display: block !important;\n        min-height: 1.5rem !important;\n      }\n      .gjs-dashed .dropdown {\n        display: block !important;\n        min-height: 1.5rem !important;\n      }\n      .gjs-dashed .dropdown-menu {\n        min-height: 1.5rem !important;\n        display: block !important;\n      }\n\n    </style>\n  ');

  // Add components
  (0, _commands2.default)(editor, options);
  (0, _traits2.default)(editor, options);
  (0, _components2.default)(editor, options);
  (0, _blocks2.default)(editor, options);
  (0, _devices2.default)(editor, options);

  // TODO Remove
  //editor.on('load', () => editor.addComponents(`<div style="margin:0 100px; padding:25px;">Content loaded from the plugin</div>`))
});

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_26__;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _underscore = __webpack_require__(2);

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//import _s from 'underscore.string';
exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var commands = editor.Commands;
};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _underscore = __webpack_require__(2);

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//import _s from 'underscore.string';
exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  var tm = editor.TraitManager;

  // Select trait that maps a class list to the select options.
  // The default select option is set if the input has a class, and class list is modified when select value changes.
  tm.addType('class_select', {
    events: {
      'change': 'onChange' // trigger parent onChange method on input change
    },
    getInputEl: function getInputEl() {
      if (!this.inputEl) {
        var md = this.model;
        var opts = md.get('options') || [];
        var input = document.createElement('select');
        var target = this.target;
        var target_view_el = this.target.view.el;
        for (var i = 0; i < opts.length; i++) {
          var name = opts[i].name;
          var value = opts[i].value;
          if (value == '') {
            value = 'GJS_NO_CLASS';
          } // 'GJS_NO_CLASS' represents no class--empty string does not trigger value change
          var option = document.createElement('option');
          option.text = name;
          option.value = value;
          var value_a = value.split(' ');
          //if(target_view_el.classList.contains(value)) {
          if (_underscore2.default.intersection(target_view_el.classList, value_a).length == value_a.length) {
            option.setAttribute('selected', 'selected');
          }
          input.append(option);
        }
        this.inputEl = input;
      }
      return this.inputEl;
    },

    onValueChange: function onValueChange() {
      var classes = this.model.get('options').map(function (opt) {
        return opt.value;
      });
      for (var i = 0; i < classes.length; i++) {
        if (classes[i].length > 0) {
          var classes_i_a = classes[i].split(' ');
          for (var j = 0; j < classes_i_a.length; j++) {
            if (classes_i_a[j].length > 0) {
              this.target.removeClass(classes_i_a[j]);
            }
          }
        }
      }
      var value = this.model.get('value');
      if (value.length > 0 && value != 'GJS_NO_CLASS') {
        var value_a = value.split(' ');
        for (var _i = 0; _i < value_a.length; _i++) {
          this.target.addClass(value_a[_i]);
        }
      }
      this.target.em.trigger('change:selectedComponent');
    }
  });
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _underscore = __webpack_require__(2);

var _underscore2 = _interopRequireDefault(_underscore);

var _underscore3 = __webpack_require__(4);

var _underscore4 = _interopRequireDefault(_underscore3);

var _collapse = __webpack_require__(80);

var _collapse2 = _interopRequireDefault(_collapse);

var _dropdown = __webpack_require__(81);

var _dropdown2 = _interopRequireDefault(_dropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  var img_src_default = 'https://dummyimage.com/450x250/999/222';

  var contexts = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark'];

  var contexts_w_white = contexts.concat(['white']);

  var sizes = {
    'lg': 'Large',
    'sm': 'Small'
  };

  var c = config;
  var domc = editor.DomComponents;
  var blocks = c.blocks;
  var cats = c.blockCategories;

  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;

  var textType = domc.getType('text');
  var textModel = textType.model;
  var textView = textType.view;

  var linkType = domc.getType('link');
  var linkModel = linkType.model;
  var linkView = linkType.view;

  var imageType = domc.getType('image');
  var imageModel = imageType.model;
  var imageView = imageType.view;

  // Rebuild the default component and add utility settings to it (border, bg, color, etc)
  if (cats.basic) {
    if (blocks.default) {
      domc.addType('default', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            tagName: 'div',
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'Default' }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
                return { value: 'text-' + v, name: _underscore4.default.capitalize(v) };
              }))),
              label: 'Text color'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Default' }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
                return { value: 'bg-' + v, name: _underscore4.default.capitalize(v) };
              }))),
              label: 'Background color'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Default' }, { value: 'border', name: 'Full' }, { value: 'border-top-0', name: 'No top' }, { value: 'border-right-0', name: 'No right' }, { value: 'border-bottom-0', name: 'No bottom' }, { value: 'border-left-0', name: 'No left' }, { value: 'border-0', name: 'None' }],
              label: 'Border width'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Default' }].concat(_toConsumableArray(contexts_w_white.map(function (v) {
                return { value: 'border border-' + v, name: _underscore4.default.capitalize(v) };
              }))),
              label: 'Border color'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Default' }, { value: 'rounded', name: 'Rounded' }, { value: 'rounded-top', name: 'Rounded top' }, { value: 'rounded-right', name: 'Rounded right' }, { value: 'rounded-bottom', name: 'Rounded bottom' }, { value: 'rounded-left', name: 'Rounded left' }, { value: 'rounded-circle', name: 'Circle' }, { value: 'rounded-0', name: 'Square' }],
              label: 'Border radius'
            }, {
              type: 'text',
              label: 'ID',
              name: 'id',
              placeholder: 'my_element'
            }, {
              type: 'text',
              label: 'Title',
              name: 'title',
              placeholder: 'My Element'
            }] //.concat(defaultModel.prototype.defaults.traits)
          }),
          init: function init() {
            var classes = this.get('classes');
            classes.bind('add', this.classesChanged.bind(this));
            classes.bind('change', this.classesChanged.bind(this));
            classes.bind('remove', this.classesChanged.bind(this));
            this.init2();
          },

          /* BS comps use init2, not init */
          init2: function init2() {},

          /* method where we can check if we should changeType */
          classesChanged: function classesChanged() {},

          /* replace the comp with a copy of a different type */
          changeType: function changeType(new_type) {
            var coll = this.collection;
            var at = coll.indexOf(this);
            var button_opts = {
              type: new_type,
              style: this.getStyle(),
              attributes: this.getAttributes(),
              content: this.view.el.innerHTML
            };
            coll.remove(this);
            coll.add(button_opts, { at: at });
            this.destroy();
          }
        }),
        view: defaultView
      });
      defaultType = domc.getType('default');
      defaultModel = defaultType.model;
      defaultView = defaultType.view;
    }

    // Rebuild the text component and add display utility setting
    if (blocks.text) {
      domc.addType('text', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Text',
            tagName: 'div',
            droppable: true,
            editable: true
          })
        }, {
          /*isComponent(el) {
            if(el && el.dataset && el.dataset.bsText) {
              return {type: 'text'};
            }
          }*/
        }),
        view: textView
      });
      textType = domc.getType('text');
      textModel = textType.model;
      textView = textType.view;
    }

    // Rebuild the link component with settings for collapse-control
    if (blocks.link) {
      domc.addType('link', {
        model: textModel.extend({
          defaults: Object.assign({}, textModel.prototype.defaults, {
            'custom-name': 'Link',
            tagName: 'a',
            droppable: true,
            editable: true,
            traits: [{
              type: 'text',
              label: 'Href',
              name: 'href',
              placeholder: 'https://www.grapesjs.com'
            }, {
              type: 'select',
              options: [{ value: '', name: 'This window' }, { value: '_blank', name: 'New window' }],
              label: 'Target',
              name: 'target'
            }, {
              type: 'select',
              options: [{ value: '', name: 'None' }, { value: 'button', name: 'Self' }, { value: 'collapse', name: 'Collapse' }, { value: 'dropdown', name: 'Dropdown' }],
              label: 'Toggles',
              name: 'data-toggle',
              changeProp: 1
            }].concat(textModel.prototype.defaults.traits)
          }),
          init2: function init2() {
            //textModel.prototype.init.call(this);
            this.listenTo(this, 'change:data-toggle', this.setupToggle);
            this.listenTo(this, 'change:attributes', this.setupToggle); // for when href changes
          },
          setupToggle: function setupToggle(a, b) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            // this should be in the dropdown comp and not the link comp
            if (options.ignore === true && options.force !== true) {
              return;
            }
            console.log('setup toggle');
            var attrs = this.getAttributes();
            var href = attrs.href;
            // old attributes are not removed from DOM even if deleted...
            delete attrs['data-toggle'];
            delete attrs['aria-expanded'];
            delete attrs['aria-controls'];
            delete attrs['aria-haspopup'];
            if (href && href.length > 0 && href.match(/^#/)) {
              console.log('link has href');
              // find the el where id == link href
              var els = this.em.get('Editor').DomComponents.getWrapper().find(href);
              if (els.length > 0) {
                console.log('referenced el found');
                var el = els[0]; // should only be one el with this ID
                var el_attrs = el.getAttributes();
                //delete el_attrs['aria-labelledby'];
                var el_classes = el_attrs.class;
                if (el_classes) {
                  console.log('el has classes');
                  var el_classes_list = el_classes.split(' ');
                  var intersection = _underscore2.default.intersection(['collapse', 'dropdown-menu'], el_classes_list);
                  if (intersection.length) {
                    console.log('link data-toggle matches el class');
                    switch (intersection[0]) {
                      case 'collapse':
                        attrs['data-toggle'] = 'collapse';
                        break;
                    }
                    attrs['aria-expanded'] = el_classes_list.includes('show');
                    if (intersection[0] == 'collapse') {
                      attrs['aria-controls'] = href.substring(1);
                    }
                  }
                }
              }
            }
            this.set('attributes', attrs, { ignore: true });
          },
          classesChanged: function classesChanged(e) {
            console.log('classes changed');
            if (this.attributes.type == 'link') {
              if (this.attributes.classes.filter(function (klass) {
                return klass.id == 'btn';
              }).length > 0) {
                this.changeType('button');
              }
            }
          }
        }, {
          isComponent: function isComponent(el) {
            if (el && el.tagName && el.tagName == 'A') {
              return { type: 'link' };
            }
          }
        }),
        view: linkView
      });
      linkType = domc.getType('link');
      linkModel = linkType.model;
      linkView = linkType.view;
    }

    if (blocks.image) {
      domc.addType('image', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Image',
            tagName: 'img',
            resizable: 1,
            attributes: {
              src: img_src_default
            },
            traits: [{
              type: 'text',
              label: 'Source (URL)',
              name: 'src'
            }, {
              type: 'text',
              label: 'Alternate text',
              name: 'alt'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.tagName == 'IMG') {
              return { type: 'image' };
            }
          }
        }),
        view: defaultView
      });
      imageType = domc.getType('image');
      imageModel = imageType.model;
      imageView = imageType.view;
    }

    // Basic

    /*if (blocks.list) {
      domc.addType('list', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'List',
            tagName: 'ul',
            resizable: 1,
            traits: [
              {
                type: 'select',
                options: [
                  {value: 'ul', name: 'No'},
                  {value: 'ol', name: 'Yes'}
                ],
                label: 'Ordered?',
                name: 'tagName',
                changeProp: 1
              }
            ].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function(el) {
            if(el && ['UL','OL'].includes(el.tagName)) {
              return {type: 'list'};
            }
          }
        }),
        view: defaultView
      });
    }*/

    /*if (blocks.description_list) {
    }*/
  }

  // LAYOUT

  if (cats.layout) {

    // Container

    if (blocks.container) {
      domc.addType('container', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Container',
            tagName: 'div',
            droppable: true,
            traits: [{
              type: 'class_select',
              options: [{ value: 'container', name: 'Fixed' }, { value: 'container-fluid', name: 'Fluid' }],
              label: 'Width'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && (el.classList.contains('container') || el.classList.contains('container-fluid'))) {
              return { type: 'container' };
            }
          }
        }),
        view: defaultView
      });
    }

    // Row

    if (blocks.row) {
      domc.addType('row', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Row',
            tagName: 'div',
            draggable: '.container, .container-fluid',
            droppable: true,
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'Yes' }, { value: 'no-gutters', name: 'No' }],
              label: 'Gutters?'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('row')) {
              return { type: 'row' };
            }
          }
        }),
        view: defaultView
      });
    }

    // Column & Column Break

    if (blocks.column) {
      domc.addType('column', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Column',
            draggable: '.row',
            droppable: true,
            traits: [{
              type: 'class_select',
              options: [{ value: 'col', name: 'Equal' }, { value: 'col-auto', name: 'Variable' }].concat(_toConsumableArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'col-' + i, name: i + '/12' };
              }))),
              label: 'XS Width'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }, { value: 'col-sm', name: 'Equal' }, { value: 'col-sm-auto', name: 'Variable' }].concat(_toConsumableArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'col-sm-' + i, name: i + '/12' };
              }))),
              label: 'SM Width'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }, { value: 'col-md', name: 'Equal' }, { value: 'col-md-auto', name: 'Variable' }].concat(_toConsumableArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'col-md-' + i, name: i + '/12' };
              }))),
              label: 'MD Width'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }, { value: 'col-lg', name: 'Equal' }, { value: 'col-lg-auto', name: 'Variable' }].concat(_toConsumableArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'col-lg-' + i, name: i + '/12' };
              }))),
              label: 'LG Width'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }, { value: 'col-xl', name: 'Equal' }, { value: 'col-xl-auto', name: 'Variable' }].concat(_toConsumableArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'col-xl-' + i, name: i + '/12' };
              }))),
              label: 'XL Width'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'offset-' + i, name: i + '/12' };
              }))),
              label: 'XS Offset'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'offset-sm-' + i, name: i + '/12' };
              }))),
              label: 'SM Offset'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'offset-md-' + i, name: i + '/12' };
              }))),
              label: 'MD Offset'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'offset-lg-' + i, name: i + '/12' };
              }))),
              label: 'LG Offset'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function (i) {
                return { value: 'offset-xl-' + i, name: i + '/12' };
              }))),
              label: 'XL Offset'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            var match = false;
            if (el && el.classList) {
              el.classList.forEach(function (klass) {
                if (klass == "col" || klass.match(/^col-/)) {
                  match = true;
                }
              });
            }
            if (match) return { type: 'column' };
          }
        }),
        view: defaultView
      });

      domc.addType('column_break', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Column Break',
            tagName: 'div',
            classes: ['w-100']
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('w-100')) {
              // also check if parent is `.row`
              return { type: 'column_break' };
            }
          }
        }),
        view: defaultView
      });

      // Media object

      domc.addType('media_object', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Media Object',
            tagName: 'div',
            classes: ['media']
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('media')) {
              return { type: 'media' };
            }
          }
        }),
        view: defaultView
      });

      domc.addType('media_body', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Media Body',
            tagName: 'div',
            classes: ['media-body']
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('media-body')) {
              return { type: 'media_body' };
            }
          }
        }),
        view: defaultView
      });
    }
  }

  // Bootstrap COMPONENTS

  if (cats.components) {

    // Alert

    if (blocks.alert) {
      domc.addType('alert', {
        model: textModel.extend({
          defaults: Object.assign({}, textModel.prototype.defaults, {
            'custom-name': 'Alert',
            tagName: 'div',
            classes: ['alert'],
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray(contexts.map(function (v) {
                return { value: 'alert-' + v, name: _underscore4.default.capitalize(v) };
              }))),
              label: 'Context'
            }].concat(textModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('alert')) {
              return { type: 'alert' };
            }
          }
        }),
        view: textView
      });
    }

    // Badge

    if (blocks.badge) {
      domc.addType('badge', {
        model: textModel.extend({
          defaults: Object.assign({}, textModel.prototype.defaults, {
            'custom-name': 'Badge',
            tagName: 'span',
            classes: ['badge'],
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray(contexts.map(function (v) {
                return { value: 'badge-' + v, name: _underscore4.default.capitalize(v) };
              }))),
              label: 'Context'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Default' }, { value: 'badge-pill', name: 'Pill' }],
              label: 'Shape'
            }].concat(textModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('badge')) {
              return { type: 'badge' };
            }
          }
        }),
        view: textView
      });
    }

    // Button

    if (blocks.button) {
      domc.addType('button', {
        model: linkModel.extend({
          defaults: Object.assign({}, linkModel.prototype.defaults, {
            'custom-name': 'Button',
            attributes: {
              role: 'button'
            },
            classes: ['btn'],
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'None' }].concat(_toConsumableArray(contexts.map(function (v) {
                return { value: 'btn-' + v, name: _underscore4.default.capitalize(v) };
              })), _toConsumableArray(contexts.map(function (v) {
                return { value: 'btn-outline-' + v, name: _underscore4.default.capitalize(v) + ' (Outline)' };
              }))),
              label: 'Context'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Default' }].concat(_toConsumableArray(Object.keys(sizes).map(function (k) {
                return { value: 'btn-' + k, name: sizes[k] };
              }))),
              label: 'Size'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Inline' }, { value: 'btn-block', name: 'Block' }],
              label: 'Width'
            }].concat(linkModel.prototype.defaults.traits)
          }),
          /*init2() {
            linkModel.prototype.init2.call(this); // call parent init in this context.
          },*/
          afterChange: function afterChange(e) {
            if (this.attributes.type == 'button') {
              if (this.attributes.classes.filter(function (klass) {
                return klass.id == 'btn';
              }).length == 0) {
                this.changeType('link');
              }
            }
          }
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('btn')) {
              return { type: 'button' };
            }
          }
        }),
        view: linkView
      });
    }

    // Button group

    if (blocks.button_group) {
      domc.addType('button_group', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Button Group',
            tagName: 'div',
            classes: ['btn-group'],
            droppable: '.btn',
            attributes: {
              role: 'group'
            },
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'Default' }].concat(_toConsumableArray(Object.keys(sizes).map(function (k) {
                return { value: 'btn-group-' + k, name: sizes[k] };
              }))),
              label: 'Size'
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'Horizontal' }, { value: 'btn-group-vertical', name: 'Vertical' }],
              label: 'Size'
            }, {
              type: 'Text',
              label: 'ARIA Label',
              name: 'aria-label',
              placeholder: 'A group of buttons'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('btn-group')) {
              return { type: 'button_group' };
            }
          }
        }),
        view: defaultView
      });
    }

    // Button toolbar

    if (blocks.button_toolbar) {
      domc.addType('button_toolbar', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Button Toolbar',
            tagName: 'div',
            classes: ['btn-toolbar'],
            droppable: '.btn-group',
            attributes: {
              role: 'toolbar'
            },
            traits: [{
              type: 'Text',
              label: 'ARIA Label',
              name: 'aria-label',
              placeholder: 'A toolbar of button groups'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('btn-toolbar')) {
              return { type: 'button_toolbar' };
            }
          }
        }),
        view: defaultView
      });
    }

    // Card

    if (blocks.card) {
      domc.addType('card', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Card',
            classes: ['card'],
            traits: [{
              type: 'checkbox',
              label: 'Image Top',
              name: 'card-img-top',
              changeProp: 1
            }, {
              type: 'checkbox',
              label: 'Header',
              name: 'card-header',
              changeProp: 1
            }, {
              type: 'checkbox',
              label: 'Image',
              name: 'card-img',
              changeProp: 1
            }, {
              type: 'checkbox',
              label: 'Image Overlay',
              name: 'card-img-overlay',
              changeProp: 1
            }, {
              type: 'checkbox',
              label: 'Body',
              name: 'card-body',
              changeProp: 1
            }, {
              type: 'checkbox',
              label: 'Footer',
              name: 'card-footer',
              changeProp: 1
            }, {
              type: 'checkbox',
              label: 'Image Bottom',
              name: 'card-img-bottom',
              changeProp: 1
            }].concat(defaultModel.prototype.defaults.traits)
          }),
          init2: function init2() {
            this.listenTo(this, 'change:card-img-top', this.cardImageTop);
            this.listenTo(this, 'change:card-header', this.cardHeader);
            this.listenTo(this, 'change:card-img', this.cardImage);
            this.listenTo(this, 'change:card-img-overlay', this.cardImageOverlay);
            this.listenTo(this, 'change:card-body', this.cardBody);
            this.listenTo(this, 'change:card-footer', this.cardFooter);
            this.listenTo(this, 'change:card-img-bottom', this.cardImageBottom);
            this.components().comparator = 'card-order';
            this.set('card-img-top', true);
            this.set('card-body', true);
          },
          cardImageTop: function cardImageTop() {
            this.createCardComponent('card-img-top');
          },
          cardHeader: function cardHeader() {
            this.createCardComponent('card-header');
          },
          cardImage: function cardImage() {
            this.createCardComponent('card-img');
          },
          cardImageOverlay: function cardImageOverlay() {
            this.createCardComponent('card-img-overlay');
          },
          cardBody: function cardBody() {
            this.createCardComponent('card-body');
          },
          cardFooter: function cardFooter() {
            this.createCardComponent('card-footer');
          },
          cardImageBottom: function cardImageBottom() {
            this.createCardComponent('card-img-bottom');
          },
          createCardComponent: function createCardComponent(prop) {
            var state = this.get(prop);
            var type = prop.replace(/-/g, '_').replace(/img/g, 'image');
            var children = this.components();
            var existing = children.filter(function (comp) {
              return comp.attributes.type == type;
            })[0]; // should only be one of each.

            if (state && !existing) {
              var comp = children.add({
                type: type
              });
              var comp_children = comp.components();
              if (prop == 'card-header') {
                comp_children.add({
                  type: 'header',
                  tagName: 'h4',
                  style: { 'margin-bottom': '0px' },
                  content: 'Card Header'
                });
              }
              if (prop == 'card-img-overlay') {
                comp_children.add({
                  type: 'header',
                  tagName: 'h4',
                  classes: ['card-title'],
                  content: 'Card title'
                });
                comp_children.add({
                  type: 'text',
                  tagName: 'p',
                  classes: ['card-text'],
                  content: "Some quick example text to build on the card title and make up the bulk of the card's content."
                });
              }
              if (prop == 'card-body') {
                comp_children.add({
                  type: 'header',
                  tagName: 'h4',
                  classes: ['card-title'],
                  content: 'Card title'
                });
                comp_children.add({
                  type: 'header',
                  tagName: 'h6',
                  classes: ['card-subtitle', 'text-muted', 'mb-2'],
                  content: 'Card subtitle'
                });
                comp_children.add({
                  type: 'text',
                  tagName: 'p',
                  classes: ['card-text'],
                  content: "Some quick example text to build on the card title and make up the bulk of the card's content."
                });
                comp_children.add({
                  type: 'link',
                  classes: ['card-link'],
                  href: '#',
                  content: 'Card link'
                });
                comp_children.add({
                  type: 'link',
                  classes: ['card-link'],
                  href: '#',
                  content: 'Another link'
                });
              }
              this.order();
            } else if (!state) {
              existing.destroy();
            }
          },
          order: function order() {}
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card')) {
              return { type: 'card' };
            }
          }
        }),
        view: defaultView
      });

      domc.addType('card_image_top', {
        model: imageModel.extend({
          defaults: Object.assign({}, imageModel.prototype.defaults, {
            'custom-name': 'Card Image Top',
            classes: ['card-img-top'],
            'card-order': 1
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-img-top')) {
              return { type: 'card_image_top' };
            }
          }
        }),
        view: imageView
      });

      domc.addType('card_header', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Card Header',
            classes: ['card-header'],
            'card-order': 2
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-header')) {
              return { type: 'card_header' };
            }
          }
        }),
        view: defaultView
      });

      domc.addType('card_image', {
        model: imageModel.extend({
          defaults: Object.assign({}, imageModel.prototype.defaults, {
            'custom-name': 'Card Image',
            classes: ['card-img'],
            'card-order': 3
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-img')) {
              return { type: 'card_image' };
            }
          }
        }),
        view: imageView
      });

      domc.addType('card_image_overlay', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Card Image Overlay',
            classes: ['card-img-overlay'],
            'card-order': 4
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-img-overlay')) {
              return { type: 'card_image_overlay' };
            }
          }
        }),
        view: defaultView
      });

      domc.addType('card_body', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Card Body',
            classes: ['card-body'],
            'card-order': 5
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-body')) {
              return { type: 'card_body' };
            }
          }
        }),
        view: defaultView
      });

      domc.addType('card_footer', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Card Footer',
            classes: ['card-footer'],
            'card-order': 6
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-footer')) {
              return { type: 'card_footer' };
            }
          }
        }),
        view: defaultView
      });

      domc.addType('card_image_bottom', {
        model: imageModel.extend({
          defaults: Object.assign({}, imageModel.prototype.defaults, {
            'custom-name': 'Card Image Bottom',
            classes: ['card-img-bottom'],
            'card-order': 7
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && el.classList.contains('card-img-bottom')) {
              return { type: 'card_image_bottom' };
            }
          }
        }),
        view: imageView
      });

      domc.addType('card_container', {
        model: defaultModel.extend({
          defaults: Object.assign({}, defaultModel.prototype.defaults, {
            'custom-name': 'Card Container',
            classes: ['card-group'],
            droppable: '.card',
            traits: [{
              type: 'class_select',
              options: [{ value: 'card-group', name: 'Group' }, { value: 'card-deck', name: 'Deck' }, { value: 'card-columns', name: 'Columns' }],
              label: 'Layout'
            }].concat(defaultModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.classList && _underscore2.default.intersection(el.classList, ['card-group', 'card-deck', 'card-columns']).length) {
              return { type: 'card_container' };
            }
          }
        }),
        view: defaultView
      });
    }

    // Collapse

    if (blocks.collapse) {
      (0, _collapse2.default)(editor, config);
    }

    // Dropdown

    if (blocks.dropdown) {
      (0, _dropdown2.default)(editor, config);
    }
  }

  // TYPOGRAPHY

  if (cats.typography) {

    // Header

    if (blocks.header) {
      domc.addType('header', {
        model: textModel.extend({
          defaults: Object.assign({}, textModel.prototype.defaults, {
            'custom-name': 'Header',
            tagName: 'h1',
            traits: [{
              type: 'select',
              options: [{ value: 'h1', name: 'One (largest)' }, { value: 'h2', name: 'Two' }, { value: 'h3', name: 'Three' }, { value: 'h4', name: 'Four' }, { value: 'h5', name: 'Five' }, { value: 'h6', name: 'Six (smallest)' }],
              label: 'Size',
              name: 'tagName',
              changeProp: 1
            }, {
              type: 'class_select',
              options: [{ value: '', name: 'None' }, { value: 'display-1', name: 'One (largest)' }, { value: 'display-2', name: 'Two ' }, { value: 'display-3', name: 'Three ' }, { value: 'display-4', name: 'Four (smallest)' }],
              label: 'Display Heading'
            }].concat(textModel.prototype.defaults.traits)
          })

        }, {
          isComponent: function isComponent(el) {
            if (el && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(el.tagName)) {
              return { type: 'header' };
            }
          }
        }),
        view: textView
      });
    }

    if (blocks.paragraph) {
      domc.addType('paragraph', {
        model: textModel.extend({
          defaults: Object.assign({}, textModel.prototype.defaults, {
            'custom-name': 'Paragraph',
            tagName: 'p',
            traits: [{
              type: 'class_select',
              options: [{ value: '', name: 'No' }, { value: 'lead', name: 'Yes' }],
              label: 'Lead?'
            }].concat(textModel.prototype.defaults.traits)
          })
        }, {
          isComponent: function isComponent(el) {
            if (el && el.tagName && el.tagName == 'P') {
              return { type: 'paragraph' };
            }
          }
        }),
        view: textView
      });
    }
  }
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function stripTags(str) {
  return makeString(str).replace(/<\/?[^>]+>/g, '');
};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = function chop(str, step) {
  if (str == null) return [];
  str = String(str);
  step = ~~step;
  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var trim = __webpack_require__(1);

module.exports = function clean(str) {
  return trim(str).replace(/\s\s+/g, ' ');
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function(str, substr) {
  str = makeString(str);
  substr = makeString(substr);

  if (str.length === 0 || substr.length === 0) return 0;
  
  return str.split(substr).length - 1;
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function swapCase(str) {
  return makeString(str).replace(/\S/g, function(c) {
    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
  });
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var escapeChars = __webpack_require__(37);

var regexString = '[';
for(var key in escapeChars) {
  regexString += key;
}
regexString += ']';

var regex = new RegExp( regexString, 'g');

module.exports = function escapeHTML(str) {

  return makeString(str).replace(regex, function(m) {
    return '&' + escapeChars[m] + ';';
  });
};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

/* We're explicitly defining the list of entities we want to escape.
nbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.

*/
var escapeChars = {
  '¢' : 'cent',
  '£' : 'pound',
  '¥' : 'yen',
  '€': 'euro',
  '©' :'copy',
  '®' : 'reg',
  '<' : 'lt',
  '>' : 'gt',
  '"' : 'quot',
  '&' : 'amp',
  '\'' : '#39'
};

module.exports = escapeChars;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var htmlEntities = __webpack_require__(39);

module.exports = function unescapeHTML(str) {
  return makeString(str).replace(/\&([^;]+);/g, function(entity, entityCode) {
    var match;

    if (entityCode in htmlEntities) {
      return htmlEntities[entityCode];
    /*eslint no-cond-assign: 0*/
    } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
      return String.fromCharCode(parseInt(match[1], 16));
    /*eslint no-cond-assign: 0*/
    } else if (match = entityCode.match(/^#(\d+)$/)) {
      return String.fromCharCode(~~match[1]);
    } else {
      return entity;
    }
  });
};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

/*
We're explicitly defining the list of entities that might see in escape HTML strings
*/
var htmlEntities = {
  nbsp: ' ',
  cent: '¢',
  pound: '£',
  yen: '¥',
  euro: '€',
  copy: '©',
  reg: '®',
  lt: '<',
  gt: '>',
  quot: '"',
  amp: '&',
  apos: '\''
};

module.exports = htmlEntities;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var splice = __webpack_require__(14);

module.exports = function insert(str, i, substr) {
  return splice(str, i, 0, substr);
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function replaceAll(str, find, replace, ignorecase) {
  var flags = (ignorecase === true)?'gi':'g';
  var reg = new RegExp(find, flags);

  return makeString(str).replace(reg, replace);
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function include(str, needle) {
  if (needle === '') return true;
  return makeString(str).indexOf(needle) !== -1;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var slice = [].slice;

module.exports = function join() {
  var args = slice.call(arguments),
    separator = args.shift();

  return args.join(makeString(separator));
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = function lines(str) {
  if (str == null) return [];
  return String(str).split(/\r\n?|\n/);
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

function getIndent(str) {
  var matches = str.match(/^[\s\\t]*/gm);
  var indent = matches[0].length;
  
  for (var i = 1; i < matches.length; i++) {
    indent = Math.min(matches[i].length, indent);
  }

  return indent;
}

module.exports = function dedent(str, pattern) {
  str = makeString(str);
  var indent = getIndent(str);
  var reg;

  if (indent === 0) return str;

  if (typeof pattern === 'string') {
    reg = new RegExp('^' + pattern, 'gm');
  } else {
    reg = new RegExp('^[ \\t]{' + indent + '}', 'gm');
  }

  return str.replace(reg, '');
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var chars = __webpack_require__(7);

module.exports = function reverse(str) {
  return chars(str).reverse().join('');
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var toPositive = __webpack_require__(15);

module.exports = function startsWith(str, starts, position) {
  str = makeString(str);
  starts = '' + starts;
  position = position == null ? 0 : Math.min(toPositive(position), str.length);
  return str.lastIndexOf(starts, position) === position;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var toPositive = __webpack_require__(15);

module.exports = function endsWith(str, ends, position) {
  str = makeString(str);
  ends = '' + ends;
  if (typeof position == 'undefined') {
    position = str.length - ends.length;
  } else {
    position = Math.min(toPositive(position), str.length) - ends.length;
  }
  return position >= 0 && str.indexOf(ends, position) === position;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var adjacent = __webpack_require__(16);

module.exports = function succ(str) {
  return adjacent(str, -1);
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var adjacent = __webpack_require__(16);

module.exports = function succ(str) {
  return adjacent(str, 1);
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function titleize(str) {
  return makeString(str).toLowerCase().replace(/(?:^|\s|-)\S/g, function(c) {
    return c.toUpperCase();
  });
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var capitalize = __webpack_require__(5);
var camelize = __webpack_require__(17);
var makeString = __webpack_require__(0);

module.exports = function classify(str) {
  str = makeString(str);
  return capitalize(camelize(str.replace(/[\W_]/g, ' ')).replace(/\s/g, ''));
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var capitalize = __webpack_require__(5);
var underscored = __webpack_require__(18);
var trim = __webpack_require__(1);

module.exports = function humanize(str) {
  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var defaultToWhiteSpace = __webpack_require__(6);
var nativeTrimLeft = String.prototype.trimLeft;

module.exports = function ltrim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp('^' + characters + '+'), '');
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function truncate(str, length, truncateStr) {
  str = makeString(str);
  truncateStr = truncateStr || '...';
  length = ~~length;
  return str.length > length ? str.slice(0, length) + truncateStr : str;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * _s.prune: a more elegant version of truncate
 * prune extra chars, never leaving a half-chopped word.
 * @author github.com/rwz
 */
var makeString = __webpack_require__(0);
var rtrim = __webpack_require__(8);

module.exports = function prune(str, length, pruneStr) {
  str = makeString(str);
  length = ~~length;
  pruneStr = pruneStr != null ? String(pruneStr) : '...';

  if (str.length <= length) return str;

  var tmpl = function(c) {
      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';
    },
    template = str.slice(0, length + 1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

  if (template.slice(template.length - 2).match(/\w\w/))
    template = template.replace(/\s*\S+$/, '');
  else
    template = rtrim(template.slice(0, template.length - 1));

  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var isBlank = __webpack_require__(10);
var trim = __webpack_require__(1);

module.exports = function words(str, delimiter) {
  if (isBlank(str)) return [];
  return trim(str, delimiter).split(delimiter || /\s+/);
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var pad = __webpack_require__(3);

module.exports = function lpad(str, length, padStr) {
  return pad(str, length, padStr);
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var pad = __webpack_require__(3);

module.exports = function rpad(str, length, padStr) {
  return pad(str, length, padStr, 'right');
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var pad = __webpack_require__(3);

module.exports = function lrpad(str, length, padStr) {
  return pad(str, length, padStr, 'both');
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var deprecate = __webpack_require__(21);

module.exports = deprecate(__webpack_require__(22).sprintf,
  'sprintf() will be removed in the next major release, use the sprintf-js package instead.');


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var deprecate = __webpack_require__(21);

module.exports = deprecate(__webpack_require__(22).vsprintf,
  'vsprintf() will be removed in the next major release, use the sprintf-js package instead.');


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = function toNumber(num, precision) {
  if (num == null) return 0;
  var factor = Math.pow(10, isFinite(precision) ? precision : 0);
  return Math.round(num * factor) / factor;
};


/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = function numberFormat(number, dec, dsep, tsep) {
  if (isNaN(number) || number == null) return '';

  number = number.toFixed(~~dec);
  tsep = typeof tsep == 'string' ? tsep : ',';

  var parts = number.split('.'),
    fnums = parts[0],
    decimals = parts[1] ? (dsep || '.') + parts[1] : '';

  return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function strRight(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.indexOf(sep);
  return~ pos ? str.slice(pos + sep.length, str.length) : str;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function strRightBack(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.lastIndexOf(sep);
  return~ pos ? str.slice(pos + sep.length, str.length) : str;
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function strLeft(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.indexOf(sep);
  return~ pos ? str.slice(0, pos) : str;
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function strLeftBack(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = str.lastIndexOf(sep);
  return~ pos ? str.slice(0, pos) : str;
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var toSentence = __webpack_require__(23);

module.exports = function toSentenceSerial(array, sep, lastSep) {
  return toSentence(array, sep, lastSep, true);
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var trim = __webpack_require__(1);
var dasherize = __webpack_require__(19);
var cleanDiacritics = __webpack_require__(13);

module.exports = function slugify(str) {
  return trim(dasherize(cleanDiacritics(str).replace(/[^\w\s-]/g, '-').toLowerCase()), '-');
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var surround = __webpack_require__(24);

module.exports = function quote(str, quoteChar) {
  return surround(str, quoteChar || '"');
};


/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = function unquote(str, quoteChar) {
  quoteChar = quoteChar || '"';
  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)
    return str.slice(1, str.length - 1);
  else return str;
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);
var strRepeat = __webpack_require__(20);

module.exports = function repeat(str, qty, separator) {
  str = makeString(str);

  qty = ~~qty;

  // using faster implementation if separator is not needed;
  if (separator == null) return strRepeat(str, qty);

  // this one is about 300x slower in Google Chrome
  /*eslint no-empty: 0*/
  for (var repeat = []; qty > 0; repeat[--qty] = str) {}
  return repeat.join(separator);
};


/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = function naturalCmp(str1, str2) {
  if (str1 == str2) return 0;
  if (!str1) return -1;
  if (!str2) return 1;

  var cmpRegex = /(\.\d+|\d+|\D+)/g,
    tokens1 = String(str1).match(cmpRegex),
    tokens2 = String(str2).match(cmpRegex),
    count = Math.min(tokens1.length, tokens2.length);

  for (var i = 0; i < count; i++) {
    var a = tokens1[i],
      b = tokens2[i];

    if (a !== b) {
      var num1 = +a;
      var num2 = +b;
      if (num1 === num1 && num2 === num2) {
        return num1 > num2 ? 1 : -1;
      }
      return a < b ? -1 : 1;
    }
  }

  if (tokens1.length != tokens2.length)
    return tokens1.length - tokens2.length;

  return str1 < str2 ? -1 : 1;
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

/**
 * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein
 */
module.exports = function levenshtein(str1, str2) {
  'use strict';
  str1 = makeString(str1);
  str2 = makeString(str2);

  // Short cut cases  
  if (str1 === str2) return 0;
  if (!str1 || !str2) return Math.max(str1.length, str2.length);

  // two rows
  var prevRow = new Array(str2.length + 1);

  // initialise previous row
  for (var i = 0; i < prevRow.length; ++i) {
    prevRow[i] = i;
  }

  // calculate current row distance from previous row
  for (i = 0; i < str1.length; ++i) {
    var nextCol = i + 1;

    for (var j = 0; j < str2.length; ++j) {
      var curCol = nextCol;

      // substution
      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );
      // insertion
      var tmp = curCol + 1;
      if (nextCol > tmp) {
        nextCol = tmp;
      }
      // deletion
      tmp = prevRow[j + 1] + 1;
      if (nextCol > tmp) {
        nextCol = tmp;
      }

      // copy current col value into previous (in preparation for next iteration)
      prevRow[j] = curCol;
    }

    // copy last col value into previous (in preparation for next iteration)
    prevRow[j] = nextCol;
  }

  return nextCol;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var trim = __webpack_require__(1);

function boolMatch(s, matchers) {
  var i, matcher, down = s.toLowerCase();
  matchers = [].concat(matchers);
  for (i = 0; i < matchers.length; i += 1) {
    matcher = matchers[i];
    if (!matcher) continue;
    if (matcher.test && matcher.test(s)) return true;
    if (matcher.toLowerCase() === down) return true;
  }
}

module.exports = function toBoolean(str, trueValues, falseValues) {
  if (typeof str === 'number') str = '' + str;
  if (typeof str !== 'string') return !!str;
  str = trim(str);
  if (boolMatch(str, trueValues || ['true', '1'])) return true;
  if (boolMatch(str, falseValues || ['false', '0'])) return false;
};


/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = function() {
  var result = {};

  for (var prop in this) {
    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join|map|wrap)$/)) continue;
    result[prop] = this[prop];
  }

  return result;
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

// Wrap
// wraps a string by a certain width

var makeString = __webpack_require__(0);

module.exports = function wrap(str, options){
  str = makeString(str);
  
  options = options || {};
  
  var width = options.width || 75;
  var seperator = options.seperator || '\n';
  var cut = options.cut || false;
  var preserveSpaces = options.preserveSpaces || false;
  var trailingSpaces = options.trailingSpaces || false;
  
  var result;
  
  if(width <= 0){
    return str;
  }
  
  else if(!cut){
  
    var words = str.split(' ');
    var current_column = 0;
    result = '';
  
    while(words.length > 0){
      
      // if adding a space and the next word would cause this line to be longer than width...
      if(1 + words[0].length + current_column > width){
        //start a new line if this line is not already empty
        if(current_column > 0){
          // add a space at the end of the line is preserveSpaces is true
          if (preserveSpaces){
            result += ' ';
            current_column++;
          }
          // fill the rest of the line with spaces if trailingSpaces option is true
          else if(trailingSpaces){
            while(current_column < width){
              result += ' ';
              current_column++;
            }            
          }
          //start new line
          result += seperator;
          current_column = 0;
        }
      }
  
      // if not at the begining of the line, add a space in front of the word
      if(current_column > 0){
        result += ' ';
        current_column++;
      }
  
      // tack on the next word, update current column, a pop words array
      result += words[0];
      current_column += words[0].length;
      words.shift();
  
    }
  
    // fill the rest of the line with spaces if trailingSpaces option is true
    if(trailingSpaces){
      while(current_column < width){
        result += ' ';
        current_column++;
      }            
    }
  
    return result;
  
  }
  
  else {
  
    var index = 0;
    result = '';
  
    // walk through each character and add seperators where appropriate
    while(index < str.length){
      if(index % width == 0 && index > 0){
        result += seperator;
      }
      result += str.charAt(index);
      index++;
    }
  
    // fill the rest of the line with spaces if trailingSpaces option is true
    if(trailingSpaces){
      while(index % width > 0){
        result += ' ';
        index++;
      }            
    }
    
    return result;
  }
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var makeString = __webpack_require__(0);

module.exports = function(str, callback) {
  str = makeString(str);

  if (str.length === 0 || typeof callback !== 'function') return str;

  return str.replace(/./g, callback);
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _underscore = __webpack_require__(2);

var _underscore2 = _interopRequireDefault(_underscore);

var _underscore3 = __webpack_require__(4);

var _underscore4 = _interopRequireDefault(_underscore3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
known issues:
*/

exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;

  comps.addType('collapse', {
    model: defaultModel.extend({
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown',
        classes: ['collapse'],
        droppable: true,
        traits: [{
          type: 'class_select',
          options: [{ value: '', name: 'Closed' }, { value: 'show', name: 'Open' }],
          label: 'Initial state'
        }].concat(defaultModel.prototype.defaults.traits)
      })
      /*init2() {
        window.asdf = this;
        const toggle = {
          type: 'button',
          content: 'Click to toggle',
          classes: ['btn', 'dropdown-toggle']
        }
        const toggle_comp = this.append(toggle)[0];
        const menu = {
          type: 'dropdown_menu'
        }
        const menu_comp = this.append(menu)[0];
        this.setupToggle(null, null, {force: true});
        const comps = this.components();
        comps.bind('add', this.setupToggle.bind(this));
        comps.bind('change', this.setupToggle.bind(this));
        comps.bind('remove', this.setupToggle.bind(this));
        const classes = this.get('classes');
        classes.bind('add', this.setupToggle.bind(this));
        classes.bind('change', this.setupToggle.bind(this));
        classes.bind('remove', this.setupToggle.bind(this));
      },
      setupToggle(a, b, options = {}) {
        const toggle = this.components().filter(c => c.getAttributes().class.split(' ').includes('dropdown-toggle'))[0];
        // raise error if toggle not found
        const menu = this.components().filter(c => c.getAttributes().class.split(' ').includes('dropdown-menu'))[0];
        // raise error if menu not found
         if(options.force !== true && options.ignore === true) {
          return;
        }
         if(toggle && menu) {
           function hasEvent(comp) {
            let eca = comp._events['change:attributes'];
            if(!eca) return false;
            return eca.filter(e => e.callback.name == 'setupToggle').length != 0;
          }
           // setup event listeners if they aren't set
          if(!hasEvent(toggle)) {
            this.listenTo(toggle, 'change:attributes', this.setupToggle);
          }
          if(!hasEvent(menu)) {
            this.listenTo(menu, 'change:attributes', this.setupToggle);
          }
           // setup toggle
          var toggle_attrs = toggle.getAttributes();
          toggle_attrs['role'] = 'button'; // if A
          var menu_attrs = menu.getAttributes();
          if(!toggle_attrs.hasOwnProperty('data-toggle')) {
            toggle_attrs['data-toggle'] = 'dropdown';
          }
          if(!toggle_attrs.hasOwnProperty('aria-haspopup')) {
            toggle_attrs['aria-haspopup'] = true;
          }
          const dropdown_classes = this.getAttributes().class.split(' ');
          toggle_attrs['aria-expanded'] = dropdown_classes.includes('show');
          toggle.set('attributes', toggle_attrs, {ignore: true});
          // setup menu
          // toggle needs ID for aria-labelled on the menu, could alert here
          if(toggle_attrs.hasOwnProperty('id')) {
            menu_attrs['aria-labelledby'] = toggle_attrs.id;
          } else {
            delete menu_attrs['aria-labelledby'];
          }
          menu.set('attributes', menu_attrs, {ignore: true});
        }
      }*/
    }, {
      isComponent: function isComponent(el) {
        if (el && el.classList && el.classList.contains('dropdown')) {
          return { type: 'dropdown' };
        }
      }
    }),
    view: defaultView.extend({
      /*init() {
        this.model.setupToggle
      }*/
    })
  });
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _underscore = __webpack_require__(2);

var _underscore2 = _interopRequireDefault(_underscore);

var _underscore3 = __webpack_require__(4);

var _underscore4 = _interopRequireDefault(_underscore3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
known issues:
- BS dropdown JS isn't attached if you remove the existing toggle and add a new one
*/

exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var comps = editor.DomComponents;
  var defaultType = comps.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;

  comps.addType('dropdown', {
    model: defaultModel.extend({
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown',
        classes: ['dropdown'],
        droppable: 'a, button, .dropdown-menu',
        traits: [{
          type: 'class_select',
          options: [{ value: '', name: 'Closed' }, { value: 'show', name: 'Open' }],
          label: 'Initial state'
        }].concat(defaultModel.prototype.defaults.traits)
      }),
      init2: function init2() {
        window.asdf = this;
        var toggle = {
          type: 'button',
          content: 'Click to toggle',
          classes: ['btn', 'dropdown-toggle']
        };
        var toggle_comp = this.append(toggle)[0];
        var menu = {
          type: 'dropdown_menu'
        };
        var menu_comp = this.append(menu)[0];
        this.setupToggle(null, null, { force: true });
        var comps = this.components();
        comps.bind('add', this.setupToggle.bind(this));
        comps.bind('change', this.setupToggle.bind(this));
        comps.bind('remove', this.setupToggle.bind(this));
        var classes = this.get('classes');
        classes.bind('add', this.setupToggle.bind(this));
        classes.bind('change', this.setupToggle.bind(this));
        classes.bind('remove', this.setupToggle.bind(this));
      },
      setupToggle: function setupToggle(a, b) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var toggle = this.components().filter(function (c) {
          return c.getAttributes().class.split(' ').includes('dropdown-toggle');
        })[0];
        // raise error if toggle not found
        var menu = this.components().filter(function (c) {
          return c.getAttributes().class.split(' ').includes('dropdown-menu');
        })[0];
        // raise error if menu not found

        if (options.force !== true && options.ignore === true) {
          return;
        }

        if (toggle && menu) {
          var hasEvent = function hasEvent(comp) {
            var eca = comp._events['change:attributes'];
            if (!eca) return false;
            return eca.filter(function (e) {
              return e.callback.name == 'setupToggle';
            }).length != 0;
          };

          // setup event listeners if they aren't set


          if (!hasEvent(toggle)) {
            this.listenTo(toggle, 'change:attributes', this.setupToggle);
          }
          if (!hasEvent(menu)) {
            this.listenTo(menu, 'change:attributes', this.setupToggle);
          }

          // setup toggle
          var toggle_attrs = toggle.getAttributes();
          toggle_attrs['role'] = 'button'; // if A
          var menu_attrs = menu.getAttributes();
          if (!toggle_attrs.hasOwnProperty('data-toggle')) {
            toggle_attrs['data-toggle'] = 'dropdown';
          }
          if (!toggle_attrs.hasOwnProperty('aria-haspopup')) {
            toggle_attrs['aria-haspopup'] = true;
          }
          var dropdown_classes = this.getAttributes().class.split(' ');
          toggle_attrs['aria-expanded'] = dropdown_classes.includes('show');
          toggle.set('attributes', toggle_attrs, { ignore: true });
          // setup menu
          // toggle needs ID for aria-labelled on the menu, could alert here
          if (toggle_attrs.hasOwnProperty('id')) {
            menu_attrs['aria-labelledby'] = toggle_attrs.id;
          } else {
            delete menu_attrs['aria-labelledby'];
          }
          menu.set('attributes', menu_attrs, { ignore: true });
        }
      }
    }, {
      isComponent: function isComponent(el) {
        if (el && el.classList && el.classList.contains('dropdown')) {
          return { type: 'dropdown' };
        }
      }
    }),
    view: defaultView.extend({
      /*init() {
        this.model.setupToggle
      }*/
    })
  });

  // need aria-labelledby to equal dropdown-toggle id
  // need to insert dropdown-item class on links when added
  comps.addType('dropdown_menu', {
    model: defaultModel.extend({
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': 'Dropdown Menu',
        classes: ['dropdown-menu'],
        draggable: '.dropdown',
        droppable: true
      }),
      init2: function init2() {
        var header = {
          type: 'header',
          tagName: 'h6',
          classes: ['dropdown-header'],
          content: 'Dropdown header'
        };
        var link = {
          type: 'link',
          classes: ['dropdown-item'],
          content: 'Dropdown item'
        };
        var divider = {
          type: 'default',
          classes: ['dropdown-divider']
        };
        this.append(header);
        this.append(link);
        this.append(divider);
        this.append(link);
      }
    }, {
      isComponent: function isComponent(el) {
        if (el && el.classList && el.classList.contains('dropdown-menu')) {
          return { type: 'dropdown_menu' };
        }
      }
    }),
    view: defaultView
  });
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var c = config;
  var bm = editor.BlockManager;
  var blocks = c.blocks;
  var cats = c.blockCategories;
  var domc = editor.DomComponents;
  var defaultType = domc.getType('default');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  // LAYOUT
  // if (blocks.container) {
  //   bm.add('container').set({
  //     label: c.labels.container,
  //     category: 'Layout',
  //     attributes: {class:'fa fa-columns'},
  //     content: {
  //       type: 'container',
  //       classes: ['container']
  //     }
  //   });
  // }

  // $.ajax({
  //   url: 'localhost:8080/api/core/craftpage/1',
  //   method: "GET"
  // }).done(function (data) {
  //     craftStore = data;
  //     var _data = data;
  //     for (var i = 0; i < _data.length; i++) {
  //         bm.add().set({
  //           label:_data[i].craft_name,
  //           category:'NC Widgets',
  //           attributes:{class:'fa fa-th'},
  //           content:{
  //             type: _data[i].craft_name,
  //           }
  //         });
  //     }

  // });

  var request = new XMLHttpRequest();
  request.open('GET', getURL('/api/core/craftpage/' + pageId), true);
  request.onload = function () {
    if (request.status >= 200 && request.status < 400) {
      // Success!
      var dat = JSON.parse(request.responseText);
      for (var i = 0; i < dat.length; i++) {
        bm.add(dat[i].craft_name).set({
          label: dat[i].title,
          category: 'NC Widgets',
          attributes: { class: 'fa fa-th' },
          content: {
            type: dat[i].craft_name,
            classes: ['ncwg-' + dat[i].id]
          }
        });
        domc.addType(dat[i].craft_name, {
          model: defaultModel.extend({
            defaults: Object.assign({}, defaultModel.prototype.defaults, {
              'custom-name': dat[i].title,
              tagName: 'div',
              classes: ['ncwg-' + dat[i].id],
              traits: [{
                label: c.labelTraitChecked,
                type: 'checkbox',
                name: 'Action',
                changeProp: 1
              }]
            })
          }, {
            isComponent: function isComponent(el) {
              var match = false;
              if (el && el.classList) {
                el.classList.forEach(function (klass) {
                  if (klass == "col" || klass.match(/^ncwg-/)) {
                    match = true;
                  }
                });
              }
              if (match) return { type: dat[i].craft_name };
            }
          }),
          view: defaultView
        });
      }
    } else {
      // We reached our target server, but it returned an error

    }
  };

  request.onerror = function () {
    // There was a connection error of some sort
  };

  request.send();
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (editor) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var c = config;
  var deviceManager = editor.DeviceManager;
  if (c.gridDevices) {
    deviceManager.add('Extra Small', '575px');
    deviceManager.add('Small', '767px');
    deviceManager.add('Medium', '991px');
    deviceManager.add('Large', '1199px');
    deviceManager.add('Extra Large', '100%');

    if (c.gridDevicesPanel) {
      var panels = editor.Panels;
      var commands = editor.Commands;
      var panelDevices = panels.addPanel({ id: 'devices-buttons' });
      var deviceBtns = panelDevices.get('buttons');
      deviceBtns.add([{
        id: 'deviceXl',
        command: 'set-device-xl',
        className: 'fa fa-desktop',
        text: 'XL',
        attributes: { 'title': 'Extra Large' },
        active: 1
      }, {
        id: 'deviceLg',
        command: 'set-device-lg',
        className: 'fa fa-desktop',
        attributes: { 'title': 'Large' }
      }, {
        id: 'deviceMd',
        command: 'set-device-md',
        className: 'fa fa-tablet',
        attributes: { 'title': 'Medium' }
      }, {
        id: 'deviceSm',
        command: 'set-device-sm',
        className: 'fa fa-mobile',
        attributes: { 'title': 'Small' }
      }, {
        id: 'deviceXs',
        command: 'set-device-xs',
        className: 'fa fa-mobile',
        attributes: { 'title': 'Extra Small' }
      }]);

      commands.add('set-device-xs', {
        run: function run(editor) {
          editor.setDevice('Extra Small');
        }
      });
      commands.add('set-device-sm', {
        run: function run(editor) {
          editor.setDevice('Small');
        }
      });
      commands.add('set-device-md', {
        run: function run(editor) {
          editor.setDevice('Medium');
        }
      });
      commands.add('set-device-lg', {
        run: function run(editor) {
          editor.setDevice('Large');
        }
      });
      commands.add('set-device-xl', {
        run: function run(editor) {
          editor.setDevice('Extra Large');
        }
      });
    }
  }
};

/***/ })
/******/ ]);
});